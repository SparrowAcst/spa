{"appWidgets":[],"pages":[{"layout":"monitor","sections":[{"id":"sein9w9tfe","type":"section","align":"justify-start","holders":[{"name":"5df2z0h8flg","width":11}]},{"id":"21o1pbye80q","type":"section","align":"justify-start","holders":[{"name":"y7bco0sm3v8","width":4},{"name":"6psx0jksru8","width":5},{"name":"83iri5b1vw","width":3}]},{"id":"cge4tz9c0a","type":"section","align":"justify-start","holders":[{"name":"nhwpzamb9ha","width":10}]},{"id":"o4h4ptvduyb","type":"section","align":"justify-start","holders":[{"name":"204r3sztitq","width":3},{"name":"lqw8moen2hc","width":4},{"name":"xbka4odbyw9","width":4}]},{"id":"hqwya9um49g","type":"section","align":"justify-start","holders":[{"name":"qsjr8boacli","width":3},{"name":"s5473w299t8","width":6}]},{"id":"a5jbu31x6na","type":"section","align":"justify-start","holders":[{"name":"q7u3b5yplfi","width":11}]},{"id":"ljw1qw0emh","type":"section","align":"justify-start","holders":[{"name":"vm441ltxtd","width":3},{"name":"j751nb7yo4h","width":3},{"name":"08hk381e8qqo","width":3},{"name":"qngeaylm46q","width":3}]},{"id":"g9j7lva1dqu","type":"section","align":"justify-start","holders":[{"name":"x0e7g8iweb","width":12}]},{"id":"cqhzf5yis9k","type":"section","align":"justify-start","holders":[{"name":"2yxvzpba4t3","width":4},{"name":"5je8561rwta","width":4},{"name":"f2p8r1yxt8","width":4}]},{"id":"if5kj47z4o","type":"section","align":"justify-start","holders":[{"name":"78h9av8bbvc","width":12}]},{"id":"pgoylkijd7d","type":"section","align":"justify-start","holders":[{"name":"ym1z5tt867n","width":12}]},{"id":"5m1j629g1m3","type":"section","align":"justify-start","holders":[{"name":"ouo0jfwxyk","width":4},{"name":"frnr58bmxbo","width":4}]},{"id":"w8llxhwud9","type":"section","align":"justify-start","holders":[{"name":"9l8s4eim8nk","width":12}]},{"id":"e1dm5w7olvf","type":"section","align":"justify-start","holders":[{"name":"dikg2tr6dj9","width":3},{"name":"hsinymonqaj","width":3},{"name":"z4wtqkqdgzo","width":6}]},{"id":"334kc8dt4js","type":"section","align":"justify-start","holders":[{"name":"gmkztbstecr","width":12}]},{"id":"ju35u6cditc","type":"section","align":"justify-center","holders":[{"name":"ugiiz8sgguc","width":8}]},{"id":"ca0y9rb2ikp","type":"section","align":"justify-center","holders":[{"name":"rty7x122byf","width":10}]}],"holders":{"h-bar":{"widgets":[{"type":"tab-bar-widget","name":"noname","icon":"mdi-page-layout-header","options":{"widget":{"visible":true},"style":"\n  widget-style {\n    margin: 0 0 0 12px;  \n    border-top: 1px solid #cfd7e6;\n    border-left: 1px solid #cfd7e6;\n    border-right: 1px solid #cfd7e6;\n    \n    border-radius:4px;\n    /*box-shadow: 0 1px 3px 0 rgba(89,105,129,.05), 0 1px 1px 0 rgba(0,0,0,.025);*/\n  }\n\n"},"data":{"source":"embedded","embedded":{"decoration":{"color":"secondary","bgColor":"#ffffff","sliderColor":"primary lighten-3","sliderSize":"5","activeClass":"active","classes":"title font-weight-light","right":false,"left":false,"vertical":true},"tabs":[{"title":"Recording Info","event":"navigate"},{"title":"Recording Validation","event":"navigate"},{"title":"Heart Sounds","event":"navigate"},{"title":"Heart Murmurs","event":"navigate"},{"title":"Pathological Findings","event":"navigate"},{"title":"Lung Sound","event":"navigate"},{"title":"Data Summary","event":"navigate"},{"title":"Form Submission","event":"navigate"}]},"script":""},"id":"exc82c574qg","activated":false}]},"t-bar":{"widgets":[{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"\nlet scripts = this.api.selectWidgets(\"gyhlq1nnspo\").config.scripts\nlet getScript = name => _.find(scripts, s => s.name == name).script\n\n\nlet users = []\nconst getUserList =  () => {\n    axios.get(\"./api/users/list\")\n        .then( response => {\n            users = response.data        \n        })\n}\ngetUserList()\n\nthis.$localStorage.set(\"harvest1_config\", {\n    db: {\n        url: \"mongodb://localhost:27017\",\n        name: \"sparrow\",\n        labelingCollection: \"harvest1\",\n        metadataCollection: \"harvest1-metadata\",\n        historyCollection: \"harvest1-history\"\n    },\n    recordId: window[\"Harvest 1 Labeling_query\"].recordId\n})\n\nconst userInfo = d => {\n    if(!d) return {\n        name: \"N/A\",\n        photo: \"\",\n        email: \"\"\n    }    \n    \n    let u = _.find(users, u => [u.name, u.altname].includes(d))\n    \n    u = (u) \n        ? {\n            name: d,\n            photo: u.photo,\n            email: u.email\n        }    \n        : {\n            name: d,\n            photo:\"\",\n            email:\"\"\n        }\n    return u    \n}\n    \n\n\nthis.on({\n    event: \"start\",\n    callback: async () => {\n        \n        console.log(\"!!!!QUERY\",this.$localStorage.get(\"harvest1_config\"))\n        \n        let response = await this.api.runDps(getScript(\"GET_RECORD\"), {options: this.$localStorage.get(\"harvest1_config\")})\n        let record = response.data\n        console.log(\"RECORD\", response.data)\n        \n        let workflowParticipants = {\n            \"CMO\": userInfo(response.data[\"CMO\"]),\n            \"1st expert\": userInfo(response.data[\"1st expert\"]),\n            \"2nd expert\": userInfo(response.data[\"2nd expert\"])\n        }    \n        \n        console.log(workflowParticipants)\n        setTimeout(() => {\n            selectWidgets(\"8xt7wl2pw9g\").update({data: workflowParticipants}, {override: \"options.data\"})\n        })\n        \n        response  = await this.api.runDps(getScript(\"GET_METADATA\"), {options: this.$localStorage.get(\"harvest1_config\")})\n        let metadata = {} \n        console.log(\"METADATA\", response.data)\n        response.data.forEach( item => {\n            metadata[item.name] = item\n        })\n        \n        \n        let instances = selectWidgets([\n            \n            \"t7d9463tjo\",\n            \"ub5oia8iq7b\",\n            \n            \"zb17pkfsfcm\",\n            \"ub5oia8iq7b\",\n            \"ivmrgnu39fl\",\n            \"8rjugxx9ma\",\n            \"nqtkk7jlv3o\",\n            \"jakdrli4mv\",\n            \"oyhzvsijtn\",\n            \"vrv8claid18\",\n            \"5b1xoz9cjxk\",\n            \"ocortdrr2f\",\n            \"d30ypt9v8p8\",\n            \"044ud0wknm7d\",\n            \"clsivx8hqpn\",\n            \"dougod2v1s9\",\n            \"fayak96njnh\",\n            \"16v4e1dplfx\",\n            \"hm7iuynb6gq\",\n            \"iva3q60c6l\",\n            \n            \"qjtwpxdyu6\",\n            \"39wymu04dw9\",\n            \"i6kmcjqd41s\",\n            \n            \"oen7ydfnq7i\",\n            \"vr35iazjm9\",\n            \"58v0tpdzdaw\",\n            \"3jebk80rpea\",\n            \"6v74bcpv6cv\"\n            \n        ])\n        \n        let namedInstances = [\n            \"Recording\",\n            \"Patient\",\n            \"Sound Presentation\",\n            \"Recording Quality\",\n            \"Class of the informativeness\",\n            \"Type of Artifacts\",\n            \"Loudness\",\n            \"Split Type\"\n            \n            \n        ]\n        \n        // console.log(window.$data)\n        \n        setTimeout(() => {\n            instances.forEach( d => {\n                d.update({data: { record, metadata} },{override:\"options.data\"})\n            })    \n        }, 10)\n        \n        \n        let tabsWidget = selectWidgets(\"exc82c574qg\").getInstance()\n        let navBarWidget = selectWidgets(\"yums7zgozwg\").getInstance()\n        let navButtonWidget = selectWidgets(\"9moznwe4427\")\n        \n        navButtonWidget.hide()\n        \n        let view = {\n            \"Recording Info\": selectSections([\"sein9w9tfe\", \"21o1pbye80q\"]),\n            \"Recording Validation\": selectSections([\"cge4tz9c0a\", \"o4h4ptvduyb\",\"hqwya9um49g\"]),\n            \"Heart Sounds\":selectSections([\"a5jbu31x6na\", \"ljw1qw0emh\"]),\n            \"Heart Murmurs\":selectSections([\"g9j7lva1dqu\", \"cqhzf5yis9k\"]),\n            \"Pathological Findings\": [selectSections([\"if5kj47z4o\"])],\n            \"Lung Sound\": selectSections([\"pgoylkijd7d\",\"5m1j629g1m3\"]),\n            \"Data Summary\": selectSections([\"w8llxhwud9\",\"e1dm5w7olvf\"]),\n            \"Form Submission\": selectSections([\"334kc8dt4js\", \"ju35u6cditc\"])\n        }\n        \n        let workflow = [\n            \"Recording Info\",\n            \"Recording Validation\",\n            \"Heart Sounds\",\n            \"Heart Murmurs\",\n            \"Pathological Findings\",\n            \"Lung Sound\",\n            \"Sound Segmentation\",\n            \"Form Submission\"   \n        ]\n        \n        let activeStage = 0\n        \n        \n        const showView = name => {\n            _.keys(view).forEach(key => {\n                view[key].forEach( v => v.hide())    \n            })\n            view[name].forEach( v => v.show())\n            activeStage = _.findIndex(workflow, d => d == name)\n        }\n        \n        \n        showView(\"Recording Info\")\n        \n        this.on({\n            event: \"navigate\",\n            callback: data => {\n                showView(data.title)\n            }\n        })\n        \n        this.on({\n            event: \"next\",\n            callback: () => {\n                activeStage = (activeStage < workflow.length-1) ? activeStage+1 : activeStage\n                tabsWidget.select(activeStage)\n                this.emit(\"navigate\", {title: workflow[activeStage]})\n            }\n        })\n        \n        this.on({\n            event: \"prev\",\n            callback: () => {\n                activeStage = (activeStage > 0) ? activeStage-1 : activeStage\n                tabsWidget.select(activeStage)\n                this.emit(\"navigate\", {title: workflow[activeStage]})\n            }\n        })\n        \n        this.on({\n            event: \"layout.h-bar\",\n            callback: data => {\n                \n                navBarWidget.options.rows[0].cols[0].decoration.icon = \n                    (navBarWidget.options.rows[0].cols[0].decoration.icon == \"mdi-arrow-collapse-left\")\n                        ? \"mdi-arrow-collapse-right\"\n                        : \"mdi-arrow-collapse-left\"\n                if(navBarWidget.options.rows[0].cols[0].decoration.icon == \"mdi-arrow-collapse-left\"){\n                    navButtonWidget.hide()    \n                } else {\n                    navButtonWidget.show()\n                }\n                        \n            }\n        })\n        \n    }\n})\n\n"},"id":"7tfxy64bro4","activated":false},{"type":"input-group-widget","name":"noname","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"button","data":{"event":"layout.h-bar"},"decoration":{"title":"","color":"primary","icon":"mdi-arrow-collapse-left","text":true,"outlined":false}},{"type":"spacer"},{"type":"note","data":{"value":"User:"},"decoration":{"classes":"primary--text font-weight-bold caption pr-2"}},{"type":"avatar","decoration":{"src":"${user.photo}","icon":"mdi-face","style":"padding:0;","size":32,"title":"${user.name}","subTitle":"${user.email}"}}],"decoration":{"classes":"d-flex align-center justify-start"}}]},"script":""},"id":"yums7zgozwg","activated":false}]},"5df2z0h8flg":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 mb-3 ml-4 font-weight-light primary--text\" >\n    Recording Info\n</div>","script":""},"id":"8sx8w46zvb4","activated":false},{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"this.on({\n    event:\"show-help\",\n    callback: (message, sender) => {\n        let w = selectWidgets(sender.data.widget)\n        console.log(w)\n        if(w.hidden){\n            w.show()\n        } else {\n            w.hide()\n        }\n    }\n})"},"id":"athcsxd6xed","activated":false}]},"rty7x122byf":{"widgets":[{"type":"input-group-widget","name":"noname","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n    margin: 24px 0 0 0;\n  }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"spacer"},{"type":"button","data":{"event":"prev","action":"reject"},"decoration":{"title":"Previus","outlined":false,"text":false,"color":"primary lighten-2","classes":"mr-1"}},{"type":"button","data":{"event":"next","action":"reject"},"decoration":{"title":"Next","outlined":false,"text":false,"color":"primary lighten-2","classes":""}}],"decoration":{"classes":"d-flex"}}]},"script":""},"id":"9moznwe4427","activated":false},{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"const flags2labels = (labels, flags) => labels.filter( (l, index) => flags[index])\r\n\r\n\r\nwindow.$data =     {\r\n \"Workflow Stage\": \"Audio Data Labeling\",\r\n \"read only\": false,\r\n \"FINALIZED\": false,\r\n \"Segmented Heart Sound\": true,\r\n \"Segmented Lung Sound\": true,\r\n \"Segmented Intestinal Sound\": true,\r\n \"Final Heart Sound Review Completed\": true,\r\n \"Final Lung Sound Review Completed\": true,\r\n \"Final Vascular Sound Review Completed\": \"No\",\r\n \"Intestinal Sounds Review Completed\": true,\r\n \"Clinical Metadata Reviewed\": true,\r\n \"Heart sound is present\": true,\r\n \"Lung sound is present\": true,\r\n \"Periferal vascular sound is present\": true,\r\n \"Bowel sound is present\": true,\r\n \"Recording quality\": \"Best\",\r\n \"Class of the informativeness\": \"Informative\",\r\n \"Type of artifacts , Artifact\": \"External noise, Electrical interference, Clipping\",\r\n \"Examination ID\": \"AVT0005\",\r\n \"Patient Count\": 1,\r\n \"Age (Years)\": 60,\r\n \"Gender\": \"Male\",\r\n \"Ethnicity\": \"White\",\r\n \"Body Position\": \"supine\",\r\n \"Body Spot\": \"tricuspid\",\r\n \"Stethoscope Model\": \"http://ec2-54-235-192-121.compute-1.amazonaws.com:8002/?record_v2=OfbD7tnVbDg9mMIoxADKPXHbvkX2%2Frecordings%2FeKuore_s15kcCEiwggKESmjj1BK&patientId=AVT0005&position=supine&spot=tricuspid&device=eKuore\",\r\n \"model\": \"eKuore\",\r\n \"path\": \"OfbD7tnVbDg9mMIoxADKPXHbvkX2%2Frecordings%2FeKuore_s15kcCEiwggKESmjj1BK\",\r\n \"Recorded with Fiter\": \"Raw\",\r\n \"Healthy\": false,\r\n \"S1 Loudness\": \"Loud\",\r\n \"S1 Split Type\": \"Normal\",\r\n \"S1 Description\": \"Loud Unidentified\",\r\n \"S2 Split Type\": \"Unclassifiable\",\r\n \"S2 description\": \"Normal loudness\",\r\n \"S3\": false,\r\n \"S3 Type\": \"Pathological\",\r\n \"S4\": false,\r\n \"Ejection Sound\": true,\r\n \"Systolic Murmur Unspicified\": true,\r\n \"Systolic Murmur\": true,\r\n \"Mid Systolic Murmur\": true,\r\n \"Still's Murmur\": true,\r\n \"Holosystolic Murmur\": true,\r\n \"Ejection Type Murmur\": true,\r\n \"Late Systolic Murmur\": true,\r\n \"Diastolic Murmur\": true,\r\n \"Diastolic High Frequency Murmur\": true,\r\n \"Austin Flint murmur\": true,\r\n \"Diastolic Low Frequency Murmur\": true,\r\n \"Additional Systolic Tones\": true,\r\n \"Additional Diastolic Tones\": true,\r\n \"Pericardial Friction Rub\": true,\r\n \"Pericardial Knock\": true,\r\n \"Constant Murmur\": true,\r\n \"Arterial murmur\": \"Long\",\r\n \"Respiratory Sound Type\": \"Lung sound\",\r\n \"Stridor\": false,\r\n \"Wheeze\": false,\r\n \"Rhonchus\": false,\r\n \"Fine crackle\": false,\r\n \"Coarse crackle\": false,\r\n \"Pleural friction rub\": false,\r\n \"Squawk\": false,\r\n \"Clinical Diagnosis\": \"\",\r\n \"EKG Diagnosis\": \"\",\r\n \"Echo Diagnosis\": \"\",\r\n \"Comments\": \"\",\r\n \"form_id\": \"1swFthoFNCNmJd0cNl3Ej_MVKwdexQ9cG88tizVDa9uA\"\r\n}\r\n\r\n\r\n\r\nwindow.$data.$enums = {\"Final Vascular Sound Review Completed\":[\"Yes\",\"No\",\"N/A\"],\"Recording quality\":[\"Best\",\"Good\",\"Bad\",\"Extremely bad\"],\"Class of the informativeness\":[\"Informative\",\"Decreased informative\",\"Uninformative\"],\"Artifact\":[\"External noise\",\"Talking\",\"Electrical interference\",\"Muscle rumble\",\"Contact with hair\",\"Bad contact\",\"Clipping\",\"Movement\",\"Low-cut filtering\",\"Corrupted file\"],\"S1 Loudness\":[\"Normal\",\"Loud\",\"Faint\",\"Absent\",\"Varying intensity\"],\"S1 Split Type\":[\"Normal\",\"Wide\",\"Inverse\",\"Unknown\"],\"S1 Description\":[\"Loud tricuspid component\",\"Loud Mitral Component\",\"Mechanical prosthetic valve sound\",\"Loud Unidentified\"],\"S2 Split Type\":[\"Normal\",\"Wide\",\"Fixed\",\"Paradixical\",\"Unclassifiable\",\"Absent\"],\"S2 description\":[\"Normal loudness\",\"Alternating\",\"Loud aortic component\",\"Loud pulmonic component\",\"Loud both components\",\"Loud\",\"Soft\",\"Absent\",\"Mechanical prosthetic valve sound\"],\"S3 Type\":[\"Pathological\",\"Innocent\",\"Unclassifiable\"],\"Arterial murmur\":[\"Absent\",\"Short\",\"Long\",\"Constant\"],\"Respiratory Sound Type\":[\"Tracheal sound\",\"Lung sound\",\"Bronchial breathing\"],\"Sound Type\":[\"Heart sound is present\",\"Lung sound is present\",\"Periferal vascular sound is present\",\"Bowel sound is present\"],\"Murmurs\":[\"Systolic Murmur Unspicified\",\"Still's Murmur\",\"Holosystolic Murmur\",\"Ejection Type Murmur\",\"Late Systolic Murmur\",\"Mid Systolic Murmur\",\"Diastolic Murmur\",\"Diastolic Low Frequency Murmur\",\"Austin Flint murmur\",\"Diastolic High Frequency Murmur\",\"Constant Murmur\"],\"Lung Pathologycal Sound\":[\"Stridor\",\"Wheeze\",\"Rhonchus\",\"Fine crackle\",\"Coarse crackle\",\"Pleural friction rub\",\"Squawk\"],\"Segmentation Details features\":[\"Segmented Heart Sound\",\"Segmented Lung Sound\",\"Segmented Intestinal Sound\",\"Final Heart Sound Review Completed\",\"Final Lung Sound Review Completed\",\"Intestinal Sounds Review Completed\",\"Clinical Metadata Reviewed\"],\"Pathological findings\":[\"Arrhythmia (extrasystoles and atrial fibrillation)\",\"Ejection Sound\",\"Additional Systolic Tones\",\"Additional Diastolic Tones\",\"Pericardial Knock\",\"Pericardial Friction Rub\"]}\r\n\r\nwindow.$data.$enums['S3 Presentation'] = [\"Sound S3 is present\"]\r\nwindow.$data.$enums['S4 Presentation'] = [\"Sound S4 is present\"]\r\n\r\nwindow.$data.soundPresentation = flags2labels(\r\n            window.$data.$enums[\"Sound Type\"],\r\n            window.$data.$enums[\"Sound Type\"]\r\n    )\r\n    \r\nwindow.$data.Artifact = window.$data[\"Type of artifacts , Artifact\"].split(\",\").map( d => d.trim())    \r\n\r\nwindow.$data['S3 Presentation'] = (window.$data.S3) ? \"Sound S3 is present\" : null\r\n\r\nwindow.$data['S4 Presentation'] = (window.$data.S4) ? \"Sound S4 is present\" : null\r\n\r\nwindow.$data.murmurs = flags2labels(\r\n            window.$data.$enums[\"Murmurs\"],\r\n            window.$data.$enums[\"Murmurs\"]\r\n    )\r\n    \r\nwindow.$data[\"Pathological findings\"] = flags2labels(\r\n            window.$data.$enums[\"Pathological findings\"],\r\n            window.$data.$enums[\"Pathological findings\"]\r\n    )\r\n\r\n// console.log(window.$data.$enums[\"Lung Pathologycal Sound\"])\r\n\r\nwindow.$data[\"Lung Pathologycal Sound\"] = flags2labels(\r\n            window.$data.$enums[\"Lung Pathologycal Sound\"],\r\n            window.$data.$enums[\"Lung Pathologycal Sound\"]\r\n    )\r\n    \r\nwindow.$data[\"Segmentation Details features\"] = flags2labels(\r\n            window.$data.$enums[\"Segmentation Details features\"],\r\n            window.$data.$enums[\"Segmentation Details features\"]\r\n    )\r\n"},"id":"qnxluujpqq","activated":false}]},"nhwpzamb9ha":{"widgets":[{"type":"html-widget","name":"noname_clone_f71yposrxd","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 mb-3 ml-4 font-weight-light primary--text\" >\n    Recording Validation\n</div>","script":""},"id":"f71yposrxd","activated":false}]},"204r3sztitq":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_xajcq2mvtrg","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Sound Presentation"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}}]},"script":""},"id":"xajcq2mvtrg","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"checkboxes","data":{"variants":"{{options.data.metadata['Sound Presentation'].values}}","value":"{{options.data.record['Sound Presentation']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"ivmrgnu39fl","activated":false}]},"lqw8moen2hc":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_osset7cdpem","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Recording Quality"},"decoration":{"classes":"title"}},{"type":"spacer"},{"type":"button","data":{"event":"show-help","widget":"ipph5ua65w"},"decoration":{"text":true,"dense":true,"icon":"mdi-help-circle-outline","color":"primary lighten-1"}}],"decoration":{"classes":"px-2 py-1 mb-1 d-flex align-center","style":"border-bottom: 1px solid #bdbdbd;"}}]},"script":""},"id":"osset7cdpem","activated":false},{"type":"md-widget","name":"noname","icon":"mdi-language-markdown-outline","options":{"widget":{"visible":true},"style":"widget-style {\n       font-size: 14px;\n    padding: 1em;\n    margin: 0 0.5em;\n    border: 1px solid #bdbdbd;\n    background: #fbfbfb;\n    line-height: 1.2;\n  }\n"},"data":{"source":"embedded","embedded":"**Best%20quality**%2C%20there%20are%20no%20any%20artifacts.%0D%0A%0D%0A**Good%20quality**%2C%20there%20are%20some%20artifacts%20without%20significant%20impact%20of%20informativeness.%20%0D%0A%0D%0A**Bad%20quality**%2C%20artifacts%20lower%20informativeness%20of%20the%20sound.%0D%0A%0D%0A**Extremely%20bad%20quality**%2C%20totally%20uninformative.%0D%0A","script":""},"id":"ipph5ua65w","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['Recording quality'].values}}","value":"{{options.data.record['Recording quality']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"8rjugxx9ma","activated":false}]},"xbka4odbyw9":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_osset7cdpem_clone_sp09guxlxdk","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Class of the informativeness"},"decoration":{"classes":"title"}},{"type":"spacer"},{"type":"button","data":{"event":"show-help","widget":"jvc2kletqq"},"decoration":{"text":true,"dense":true,"icon":"mdi-help-circle-outline","color":"primary lighten-1"}}],"decoration":{"classes":"px-2 py-1 mb-1 d-flex align-center","style":"border-bottom: 1px solid #bdbdbd;"}}]},"script":""},"id":"sp09guxlxdk","activated":false},{"type":"md-widget","name":"noname_clone_jvc2kletqq","icon":"mdi-language-markdown-outline","options":{"widget":{"visible":true},"style":"widget-style {\n       font-size: 14px;\n    padding: 1em;\n    margin: 0 0.5em;\n    border: 1px solid #bdbdbd;\n    background: #fbfbfb;\n    line-height: 1.2;\n  }\n"},"data":{"source":"embedded","embedded":"This%20characteristic%20describes%20overall%20amount%20of%20information%20irrespective%20to%20the%20quality%20of%20recording%0D%0A1.%09**Informative**%20(we%20can%20extract%20all%20clinically%20relevant%20information)%0D%0A2.%09**Decreased**%20informative%20(some%20information%20is%20hidden%2C%20see%20the%20explanation%20below)%0D%0A3.%09**Uninformative**%20(any%20information%20is%20unavailable)%0D%0A%0D%0AClass%202%20of%20informativeness%20explanation%2C%20at%20least%20one%20of%20the%20following%3A%0D%0A%0D%0A1.%09The%20presence%20of%20the%20heart%20sounds%20enough%20for%20the%20segmentation%20of%20more%20than%20five%20consequent%20cardiac%20cycles.%0D%0A2.%09The%20presence%20of%20the%20lung%20sounds%20enough%20for%20the%20segmentation%20of%20more%20than%20three%20consequent%20breath%20cycles.%0D%0A3.%09Recordings%20from%20the%20abdomen%20can%20be%20without%20any%20heart%2C%20lung%2C%20intestine%2C%20or%20bowel%20sounds.%0D%0A","script":""},"id":"jvc2kletqq","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_nqtkk7jlv3o","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['Class of the informativeness'].values}}","value":"{{options.data.record['Class of the informativeness']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"nqtkk7jlv3o","activated":false}]},"q7u3b5yplfi":{"widgets":[{"type":"html-widget","name":"noname_clone_f71yposrxd_clone_iqsjlc9ut59","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 mb-3 ml-4 font-weight-light primary--text\" >\n    Heart Sounds\n</div>","script":""},"id":"iqsjlc9ut59","activated":false}]},"vm441ltxtd":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_nqtkk7jlv3o_clone_oyhzvsijtn","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n      padding: 5px;\n      border: 1px solid #bdbdbd;\n      height: 680px;\n      border-radius:4px\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Sound Details S1"}}],"decoration":{"classes":"headline px-2 py-1 mb-1 primary--text","style":""}},{"cols":[{"type":"note","data":{"value":"Mitral component Loudness"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['S1 Mitral component Loudness'].values}}","value":"{{options.data.record['S1 Mitral component Loudness']}}"},"decoration":{"classes":"pa-3"}}]},{"cols":[{"type":"note","data":{"value":"Split Type"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['S1 Split Type'].values}}","value":"{{options.data.record['S1 Split Type']}}"},"decoration":{"classes":"pa-3"}}]},{"cols":[{"type":"note","data":{"value":"Description"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['S1 Description'].values}}","value":"{{options.data.record['S1 Description']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"oyhzvsijtn","activated":false}]},"j751nb7yo4h":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_nqtkk7jlv3o_clone_oyhzvsijtn_clone_5rbslhx1ys6_clone_enan0gy77ov_clone_vrv8claid18","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n      padding: 5px;\n      border: 1px solid #bdbdbd;\n      height: 680px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Sound Details S2"}}],"decoration":{"classes":"headline px-2 py-1 mb-1 primary--text","style":""}},{"cols":[{"type":"note","data":{"value":"Split Type"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['S2 Split Type'].values}}","value":"{{options.data.record['S2 Split Type']}}"},"decoration":{"classes":"pa-3"}}]},{"cols":[{"type":"note","data":{"value":"Description"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['S2 description'].values}}","value":"{{options.data.record['S2 description']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"vrv8claid18","activated":false}]},"08hk381e8qqo":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_5b1xoz9cjxk","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n      padding: 5px;\n      border: 1px solid #bdbdbd;\n      height: 680px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Sound Details S3"}}],"decoration":{"classes":"headline px-2 py-1 mb-1 primary--text","style":""}},{"cols":[{"type":"note","data":{"value":"Presentation"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"checkbox","data":{"label":"is present","value":"{{ options.data.record['S3']}}"},"decoration":{"classes":"pa-3"}}]},{"cols":[{"type":"note","data":{"value":"Type"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['S3 Type'].values}}","value":"{{options.data.record['S3 Type']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"5b1xoz9cjxk","activated":false}]},"qngeaylm46q":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_5b1xoz9cjxk_clone_ocortdrr2f","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n      padding: 5px;\n      border: 1px solid #bdbdbd;\n      height: 680px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Sound Details S4"}}],"decoration":{"classes":"headline px-2 py-1 mb-1 primary--text","style":""}},{"cols":[{"type":"note","data":{"value":"Presentation"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"checkbox","data":{"variants":["present"],"label":"is present","value":"{{ options.data.record['S4'] }}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"ocortdrr2f","activated":false}]},"x0e7g8iweb":{"widgets":[{"type":"html-widget","name":"noname_clone_f71yposrxd_clone_iqsjlc9ut59_clone_pom9ssfpgi9","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 mb-3 ml-4 font-weight-light primary--text\" >\n    Heart Murmurs\n</div>","script":""},"id":"pom9ssfpgi9","activated":false}]},"78h9av8bbvc":{"widgets":[{"type":"html-widget","name":"noname_clone_f71yposrxd_clone_iqsjlc9ut59_clone_pom9ssfpgi9_clone_cxobsqrang","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 mb-3 ml-4 font-weight-light primary--text\" >\n    Pathological findings\n</div>","script":""},"id":"cxobsqrang","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_044ud0wknm7d","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"checkboxes","data":{"variants":"{{options.data.metadata['Pathological findings'].values}}","value":"{{options.data.record['Pathological findings']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"044ud0wknm7d","activated":false}]},"ym1z5tt867n":{"widgets":[{"type":"html-widget","name":"noname_clone_f71yposrxd_clone_iqsjlc9ut59_clone_pom9ssfpgi9_clone_cxobsqrang_clone_7fq2l9jndqx","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 mb-3 ml-4 font-weight-light primary--text\" >\n    Lung Sounds\n</div>\n\n<div class=\"my-2 ml-4 font-weight-light\">\n    These may be either coarse or fine. They are discontinuous, interrupted explosive sounds. Coarse crackles or crepitations are associated with bronchiectasis or resolving pneumonia, whereas fine crackles can be heard with either pulmonary oedema or interstitial fibrosis.\n</div>","script":""},"id":"7fq2l9jndqx","activated":false}]},"ouo0jfwxyk":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_d30ypt9v8p8_clone_dougod2v1s9","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Respiratory Sound Type"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['Respiratory Sound Type'].values}}","value":"{{options.data.record['Respiratory Sound Type']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"dougod2v1s9","activated":false}]},"frnr58bmxbo":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_044ud0wknm7d_clone_fayak96njnh","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Lung Pathologycal Sound"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"checkboxes","data":{"variants":"{{options.data.metadata['Lung Pathologycal Sound'].values}}","value":"{{options.data.record['Lung Pathologycal Sound']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"fayak96njnh","activated":false}]},"9l8s4eim8nk":{"widgets":[{"type":"html-widget","name":"noname_clone_f71yposrxd_clone_iqsjlc9ut59_clone_pom9ssfpgi9_clone_cxobsqrang_clone_7fq2l9jndqx_clone_mydkj2c9jc8","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 mb-3 ml-4 font-weight-light primary--text\" >\n    Data Summary\n</div>\n","script":""},"id":"mydkj2c9jc8","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_d30ypt9v8p8_clone_dougod2v1s9_clone_16v4e1dplfx","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"html","data":{"value":"${`You can analyze the audio recording with this <a href=\"${this.options.data[\"Stethoscope Model\"]}\" target=\"_blank\"> tool</a>`}"}}],"decoration":{"classes":"px-2 py-1 mb-1 font-weight-light"}}]},"script":""},"id":"16v4e1dplfx","activated":false}]},"gmkztbstecr":{"widgets":[{"type":"html-widget","name":"noname_clone_f71yposrxd_clone_iqsjlc9ut59_clone_pom9ssfpgi9_clone_cxobsqrang_clone_7fq2l9jndqx_clone_mydkj2c9jc8_clone_sjaqcdvoj3","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 mb-3 ml-4 font-weight-light primary--text\" >\n    Form Submission\n</div>\n","script":""},"id":"sjaqcdvoj3","activated":false}]},"ugiiz8sgguc":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_d30ypt9v8p8_clone_dougod2v1s9_clone_iva3q60c6l_clone_v3ndh9kkxvf","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"You must select the next stage of the workflow from which the next session will start"}}],"decoration":{"classes":"title px-2 py-1 mb-1"}},{"cols":[{"type":"one-of-many","data":{"variants":["Continue Audio Data Labeling Stage","Start Validation Stage","Finalize Workflow"]},"decoration":{"classes":"pa-3"}}]},{"cols":[{"type":"spacer"},{"type":"button","data":{"event":"submit","action":"reject"},"decoration":{"title":"Submit","outlined":true,"text":true,"color":"primary lighten-2","classes":"mr-1"}}],"decoration":{"classes":"d-flex"}}]},"script":""},"id":"v3ndh9kkxvf","activated":false}]},"qsjr8boacli":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_hyzqwbrwos","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Type of Artifacts"},"decoration":{"classes":"title"}},{"type":"spacer"},{"type":"button","data":{"event":"show-help","widget":"m6j9r1gtqu"},"decoration":{"text":true,"dense":true,"icon":"mdi-help-circle-outline","color":"primary lighten-1"}}],"decoration":{"classes":"px-2 py-1 mb-1 d-flex align-center","style":"border-bottom: 1px solid #bdbdbd;"}}]},"script":""},"id":"hyzqwbrwos","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_jakdrli4mv","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"checkboxes","data":{"variants":"{{options.data.metadata['Type of artifacts , Artifact'].values}}","value":"{{options.data.record['Type of artifacts , Artifact']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"jakdrli4mv","activated":false}]},"s5473w299t8":{"widgets":[{"type":"md-widget","name":"noname_clone_m6j9r1gtqu","icon":"mdi-language-markdown-outline","options":{"widget":{"visible":true},"style":"\n  widget-style {\n        font-size: 14px;\n    padding: 1em;\n    margin: 0 0.5em;\n    border: 1px solid #bdbdbd;\n    background: #fbfbfb;\n    line-height: 1.2;\n  }\n"},"data":{"source":"embedded","embedded":"**External%20noise.**%20Any%20ambient%20noise.%20Try%20to%20record%20your%20sound%20in%20a%20quiet%20place.%0D%0A%0D%0A**Talking.**%20The%20talk%20of%20any%20origin.%20Do%20not%20talk%20during%20recording%0D%0A%0D%0A**Electrical%20interference.**%20Harmonical%20constant%20vibrations%20with%20the%20frequency%2050%20or%2060%20Hz.%20They%20can%20be%20multiple%2C%20e.g.%2C%2050%2C%20100%2C%20200%20Hz.%20Try%20to%20record%20your%20sound%20far%20from%20electrical%20devices%20and%20wires.%0D%0A%0D%0A**Muscle%20rumble.**%20Low-frequency%20rumble%20generated%20Do%20not%20press%20firmly%20by%20your%20recording%20device%20on%20the%20skin%20(the%20effort%20to%20hold%20the%20by%20patient%E2%80%99s%20muscles%20or%20excessive%20pressure%20by%20the%20recording%20device%20on%20the%20skin.%20This%20artifact%20is%20noticeable%20below%20100%20Hz%2C%20relatively%20constant%2C%20but%20change%20its%20power%20and%20frequency%20spectrum.%0D%0A%0D%0A**Contact%20with%20hair.**%20High-pitched%20short%20multiple%20random%20clicks.%20Try%20to%20place%20your%20recording%20device%20on%20the%20skin%20without%20excessive%20amount%20of%20hair.%0D%0A%0D%0A**Bad%20contact.**%20Low-quality%20body%20sound%20with%20good%20quality%20ambient%20sounds.%0D%0A%0D%0A**Clipping.**%20Sound%20distortion%20mostly%20related%20to%20excessive%20loudness.%20It%20seems%20that%20your%20smartphone%20is%20placed%20very%20close%20to%20the%20heart%20and%20the%20sound%20is%20too%20loud.%20Try%20moving%20its%20position%20two%20centimeters%20to%20the%20left.%0D%0A%0D%0A**Movement.**%20Usually%20very%20loud%20random%20sounds%20with%20wide%20frequency%20range%20generated%20by%20touching%20of%20recording%20device%20or%20the%20patient%E2%80%99s%20body%20to%20other%20objects%20(clothes%2C%20pillow%20etc.).%20Try%20to%20hold%20your%20smartphone%20fixed%20and%20avoid%20any%20movement%20of%20your%20body.%0D%0A%0D%0A**Low-cut%20filtering.**%20Significant%20lack%20of%20the%20low%20frequencies%20Use%20another%20smartphone%0D%0A%0D%0A**Vibration%20Ringing.**%20Sound%20associated%20with%20smartphone%20vibration%20ringing%20Record%20the%20file%20again%0D%0A%0D%0A**Corrupted%20file.**%20Unnatural%20changes%20in%20the%20sound%20due%20to%20the%20destruction%20of%20the%20code%20of%20file%0D%0A%0D%0A**Unclassified%20artifact.**%20Any%20other%20artifact%0D%0A","script":""},"id":"m6j9r1gtqu","activated":false},{"type":"html-widget","name":"STYLES","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<style>\n    p {\n     margin: 0 0 0.2em !important;\n    }\n</style>","script":""},"id":"rodgguiwi68","activated":false}]},"2yxvzpba4t3":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_044ud0wknm7d_clone_qjtwpxdyu6","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Systolic murmurs"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"checkboxes","data":{"variants":"{{options.data.metadata['Systolic murmurs'].values}}","value":"{{options.data.record['Systolic murmurs']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"qjtwpxdyu6","activated":false}]},"5je8561rwta":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_044ud0wknm7d_clone_azxxfatlxyj_clone_39wymu04dw9","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Diastolic murmurs"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"checkboxes","data":{"variants":"{{options.data.metadata['Diastolic murmurs'].values}}","value":"{{options.data.record['Diastolic murmurs']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"39wymu04dw9","activated":false}]},"f2p8r1yxt8":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_044ud0wknm7d_clone_azxxfatlxyj_clone_39wymu04dw9_clone_i6kmcjqd41s","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Other murmurs"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"checkboxes","data":{"variants":"{{options.data.metadata['Other murmurs'].values}}","value":"{{options.data.record['Other murmurs']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"i6kmcjqd41s","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_d30ypt9v8p8","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Arterial murmur"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['Arterial murmur'].values}}","value":"{{options.data.record['Arterial murmur']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"d30ypt9v8p8","activated":false}]},"dikg2tr6dj9":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_d30ypt9v8p8_clone_dougod2v1s9_clone_iva3q60c6l_clone_oen7ydfnq7i","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Confidence"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['Confidence'].values}}","value":"{{options.data.record['Confidence']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"oen7ydfnq7i","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_044ud0wknm7d_clone_fayak96njnh_clone_hm7iuynb6gq","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Sound Segmentation"}},{"type":"spacer"},{"type":"html","data":{"value":"{{options.data.record['Stethoscope Model']}}"},"decoration":{"classes":"body-1"}}],"decoration":{"classes":"title px-2 py-1 mb-1 d-flex align-center","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"checkboxes","data":{"variants":"{{options.data.metadata['Sound Segmentation'].values}}","value":"{{options.data.record['Sound Segmentation']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"hm7iuynb6gq","activated":false}]},"hsinymonqaj":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_d30ypt9v8p8_clone_dougod2v1s9_clone_iva3q60c6l_clone_vr35iazjm9","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Final Heart Sound Review Completed"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['Final Heart Sound Review Completed'].values}}","value":"{{options.data.record['Final Heart Sound Review Completed']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"vr35iazjm9","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_d30ypt9v8p8_clone_dougod2v1s9_clone_iva3q60c6l_clone_vr35iazjm9_clone_58v0tpdzdaw","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Final Lung Sound Review Completed"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['Final Lung Sound Review Completed'].values}}","value":"{{options.data.record['Final Lung Sound Review Completed']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"58v0tpdzdaw","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_d30ypt9v8p8_clone_dougod2v1s9_clone_iva3q60c6l","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Final Vascular Sound Review"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['Final Vascular Sound Review Completed'].values}}","value":"{{options.data.record['Final Vascular Sound Review Completed']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"iva3q60c6l","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_d30ypt9v8p8_clone_dougod2v1s9_clone_iva3q60c6l_clone_vr35iazjm9_clone_58v0tpdzdaw_clone_3jebk80rpea","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Intestinal Sounds Review Completed"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"one-of-many","data":{"variants":"{{options.data.metadata['Intestinal Sounds Review Completed'].values}}","value":"{{options.data.record['Intestinal Sounds Review Completed']}}"},"decoration":{"classes":"pa-3"}}]}]},"script":""},"id":"3jebk80rpea","activated":false}]},"z4wtqkqdgzo":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_ivmrgnu39fl_clone_8rjugxx9ma_clone_d30ypt9v8p8_clone_dougod2v1s9_clone_iva3q60c6l_clone_vr35iazjm9_clone_58v0tpdzdaw_clone_3jebk80rpea_clone_6v74bcpv6cv","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Comments"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"textarea","data":{"label":"1st level comments","value":"{{options.data.record[\"1st level comments\"]}}"},"decoration":{"classes":"pa-3","flat":true,"outlined":true,"rows":5}}]},{"cols":[{"type":"textarea","data":{"label":"2nd level comments","value":"{{options.data.record[\"2nd level comments\"]}}"},"decoration":{"classes":"pa-3","flat":true,"outlined":true,"rows":5}}]},{"cols":[{"type":"textarea","data":{"label":"Final comments","value":"{{options.data.record[\"Final comments\"]}}"},"decoration":{"classes":"pa-3 captions","flat":true,"outlined":true,"rows":5}}]}]},"script":""},"id":"6v74bcpv6cv","activated":false}]},"y7bco0sm3v8":{"widgets":[{"type":"input-group-widget","name":"noname_clone_t7d9463tjo","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Recording"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"note","data":{"value":"Device Moldel:"},"decoration":{"classes":"flex xs7"}},{"type":"note","data":{"value":"{{options.data.record.model}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}},{"cols":[{"type":"note","data":{"value":"Recorded with Filter:"},"decoration":{"classes":"flex xs7"}},{"type":"note","data":{"value":"{{options.data.record['Recorded with Fiter']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}},{"cols":[{"type":"note","data":{"value":"Body Spot:"},"decoration":{"classes":"flex xs7"}},{"type":"note","data":{"value":"{{options.data.record['Body Spot']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}},{"cols":[{"type":"note","data":{"value":"Body Position:"},"decoration":{"classes":"flex xs7"}},{"type":"note","data":{"value":"{{options.data.record['Body Position']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}}]},"script":""},"id":"t7d9463tjo","activated":false},{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Patient"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"note","data":{"value":"Examination ID:"},"decoration":{"classes":"flex xs4"}},{"type":"note","data":{"value":"{{options.data.record['Examination ID']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}},{"cols":[{"type":"note","data":{"value":"Age (Years):"},"decoration":{"classes":"flex xs4"}},{"type":"note","data":{"value":"{{options.data.record['Age (Years)']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}},{"cols":[{"type":"note","data":{"value":"Gender:"},"decoration":{"classes":"flex xs4"}},{"type":"note","data":{"value":"{{options.data.record['Gender']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}},{"cols":[{"type":"note","data":{"value":"Ethnicity:"},"decoration":{"classes":"flex xs4"}},{"type":"note","data":{"value":"{{options.data.record['Ethnicity']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}}]},"script":""},"id":"ub5oia8iq7b","activated":false}]},"6psx0jksru8":{"widgets":[]},"83iri5b1vw":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ub5oia8iq7b_clone_8xt7wl2pw9g","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n      padding: 0 10px;\n      border: 1px solid #bdbdbd;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Workflow"}}],"decoration":{"classes":"title px-2 py-1 mb-1","style":"border-bottom: 1px solid #bdbdbd;"}},{"cols":[{"type":"note","data":{"value":"1st expert"},"decoration":{"classes":"primary--text font-weight-bold flex xs4"}},{"type":"avatar","decoration":{"src":"{{options.data[\"1st expert\"].photo}}","icon":"mdi-account-outline","style":"padding:0 10px;","size":36,"title":"{{options.data[\"1st expert\"].name}}","subTitle":"{{options.data[\"1st expert\"].email}}"}}],"decoration":{"classes":"d-flex align-center mb-2"}},{"cols":[{"type":"note","data":{"value":"2nd expert"},"decoration":{"classes":"primary--text font-weight-bold flex xs4"}},{"type":"avatar","decoration":{"src":"{{options.data[\"2nd expert\"].photo}}","icon":"mdi-account-outline","style":"padding:0 10px;","size":36,"title":"{{options.data[\"2nd expert\"].name}}","subTitle":"{{options.data[\"2nd expert\"].email}}"}}],"decoration":{"classes":"d-flex align-center mb-2"}},{"cols":[{"type":"note","data":{"value":"CMO"},"decoration":{"classes":"primary--text font-weight-bold flex xs4"}},{"type":"avatar","decoration":{"src":"{{options.data[\"CMO\"].photo}}","icon":"mdi-account-outline","style":"padding:0 10px;","size":36,"title":"{{options.data[\"CMO\"].name}}","subTitle":"{{options.data[\"CMO\"].email}}"}}],"decoration":{"classes":"d-flex align-center mb-2"}},{"cols":[{"type":"note","data":{"value":"Last Update"}}],"decoration":{"classes":"px-2 py-1 mb-1 font-weight-bold"}},{"cols":[{"type":"note","data":{"value":"At:"},"decoration":{"classes":"flex xs3"}},{"type":"note","data":{"value":"{{options.data['Examination ID']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}},{"cols":[{"type":"note","data":{"value":"By:"},"decoration":{"classes":"flex xs3"}},{"type":"note","data":{"value":"{{options.data['Age (Years)']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}},{"cols":[{"type":"note","data":{"value":"Stage:"},"decoration":{"classes":"flex xs3"}},{"type":"note","data":{"value":"{{options.data['Gender']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}},{"cols":[{"type":"note","data":{"value":"comment:"},"decoration":{"classes":"flex xs3"}},{"type":"note","data":{"value":"{{options.data['Ethnicity']}}"},"decoration":{"classes":"flex"}}],"decoration":{"classes":"d-flex align-center px-2"}}],"decoration":{"classes":"body-2"}},"script":""},"id":"8xt7wl2pw9g","activated":false}]}},"title":"main","url":"http://localhost:8080/design/Harvest%201%20Labeling#/","id":"main"},{"layout":"monitor","sections":[{"id":"default section","type":"section","align":"justify-start","holders":[{"name":"default","width":12}]}],"holders":{"default":{"widgets":[]},"h-bar":{"widgets":[]},"t-bar":{"widgets":[]}},"id":"report1","title":"report1","url":"http://localhost:8080/design/Recording%20Data%20Labeling#/report1"},{"layout":"monitor","sections":[{"id":"sein9w9tfe","type":"section","align":"justify-center","holders":[{"name":"5df2z0h8flg","width":11}]},{"id":"fwaw17n8mnw","type":"section","align":"justify-center","holders":[{"name":"nai9md13wb","width":11}]},{"id":"kk82v7jcsp","type":"section","align":"justify-center","holders":[{"name":"9113igdmxrg","width":11}]},{"id":"qewh6bj8bjj","type":"section","align":"justify-center","holders":[{"name":"i92e8oblwrc","width":11}]}],"holders":{"h-bar":{"widgets":[{"type":"tab-bar-widget","name":"noname","icon":"mdi-page-layout-header","options":{"widget":{"visible":true},"style":"\n  widget-style {\n    margin: 0 0 0 12px;  \n    border-top: 1px solid #cfd7e6;\n    border-left: 1px solid #cfd7e6;\n    border-right: 1px solid #cfd7e6;\n    \n    border-radius:4px;\n    /*box-shadow: 0 1px 3px 0 rgba(89,105,129,.05), 0 1px 1px 0 rgba(0,0,0,.025);*/\n  }\n\n"},"data":{"source":"embedded","embedded":{"decoration":{"color":"secondary","bgColor":"#ffffff","sliderColor":"primary lighten-3","sliderSize":"5","activeClass":"active","classes":"title font-weight-light","right":false,"left":false,"vertical":true},"tabs":[{"title":"Statistics","event":"navigate"},{"title":"Data","event":"navigate"}]},"script":""},"id":"exc82c574qg","activated":false}]},"t-bar":{"widgets":[{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"\n// if(!this.app.user.isLoggedIn){\n//     this.$djvue.login()\n// }    \n\nconsole.log(\"REQUEST QUERY\", window[\"Recording Data Labeling_query\"] )\n\nthis.on({\n    event: \"start\",\n    callback: () => {\n        \n        let instances = selectWidgets([\n            \"zb17pkfsfcm\",\n            \"ub5oia8iq7b\",\n            \"ivmrgnu39fl\",\n            \"8rjugxx9ma\",\n            \"nqtkk7jlv3o\",\n            \"jakdrli4mv\",\n            \"oyhzvsijtn\",\n            \"vrv8claid18\",\n            \"5b1xoz9cjxk\",\n            \"ocortdrr2f\",\n            \"d30ypt9v8p8\",\n            \"044ud0wknm7d\",\n            \"clsivx8hqpn\",\n            \"dougod2v1s9\",\n            \"fayak96njnh\",\n            \"16v4e1dplfx\",\n            \"hm7iuynb6gq\",\n            \"iva3q60c6l\"\n        ])\n        \n        let namedInstances = [\n            \"Recording\",\n            \"Patient\",\n            \"Sound Presentation\",\n            \"Recording Quality\",\n            \"Class of the informativeness\",\n            \"Type of Artifacts\",\n            \"Loudness\",\n            \"Split Type\"\n            \n            \n        ]\n        \n        console.log(window.$data)\n        setTimeout(() => {\n            instances.forEach( d => {\n                d.update({data: window.$data},{override:\"options.data\"})\n            })    \n        }, 10)\n        \n        \n        let tabsWidget = selectWidgets(\"exc82c574qg\").getInstance()\n        let navBarWidget = selectWidgets(\"yums7zgozwg\").getInstance()\n        let navButtonWidget = selectWidgets(\"9moznwe4427\")\n        \n        navButtonWidget.hide()\n        \n        let view = {\n            \"Recording Info\": selectSections([\"sein9w9tfe\", \"480me4x2oq5\"]),\n            \"Recording Validation\": selectSections([\"cge4tz9c0a\", \"o4h4ptvduyb\",\"hqwya9um49g\"]),\n            \"Heart Sounds\":selectSections([\"a5jbu31x6na\", \"ljw1qw0emh\"]),\n            \"Heart Murmurs\":selectSections([\"g9j7lva1dqu\", \"y6r04bx68v\"]),\n            \"Pathological Findings\": [selectSections([\"if5kj47z4o\"])],\n            \"Lung Sound\": selectSections([\"pgoylkijd7d\",\"5m1j629g1m3\"]),\n            \"Sound Segmentation\": selectSections([\"w8llxhwud9\",\"e4x199lg0kj\"]),\n            \"Form Submission\": selectSections([\"334kc8dt4js\", \"ju35u6cditc\"])\n        }\n        \n        let workflow = [\n            \"Recording Info\",\n            \"Recording Validation\",\n            \"Heart Sounds\",\n            \"Heart Murmurs\",\n            \"Pathological Findings\",\n            \"Lung Sound\",\n            \"Sound Segmentation\",\n            \"Form Submission\"   \n        ]\n        \n        let activeStage = 0\n        \n        \n        const showView = name => {\n            _.keys(view).forEach(key => {\n                view[key].forEach( v => v.hide())    \n            })\n            view[name].forEach( v => v.show())\n            activeStage = _.findIndex(workflow, d => d == name)\n        }\n        \n        \n        showView(\"Recording Info\")\n        \n        this.on({\n            event: \"navigate\",\n            callback: data => {\n                showView(data.title)\n            }\n        })\n        \n        this.on({\n            event: \"next\",\n            callback: () => {\n                activeStage = (activeStage < workflow.length-1) ? activeStage+1 : activeStage\n                tabsWidget.select(activeStage)\n                this.emit(\"navigate\", {title: workflow[activeStage]})\n            }\n        })\n        \n        this.on({\n            event: \"prev\",\n            callback: () => {\n                activeStage = (activeStage > 0) ? activeStage-1 : activeStage\n                tabsWidget.select(activeStage)\n                this.emit(\"navigate\", {title: workflow[activeStage]})\n            }\n        })\n        \n        this.on({\n            event: \"layout.h-bar\",\n            callback: data => {\n                \n                navBarWidget.options.rows[0].cols[0].decoration.icon = \n                    (navBarWidget.options.rows[0].cols[0].decoration.icon == \"mdi-arrow-collapse-left\")\n                        ? \"mdi-arrow-collapse-right\"\n                        : \"mdi-arrow-collapse-left\"\n                if(navBarWidget.options.rows[0].cols[0].decoration.icon == \"mdi-arrow-collapse-left\"){\n                    navButtonWidget.hide()    \n                } else {\n                    navButtonWidget.show()\n                }\n                        \n            }\n        })\n        \n    }\n})\n\n"},"id":"7tfxy64bro4","activated":false},{"type":"input-group-widget","name":"noname","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"button","data":{"event":"layout.h-bar"},"decoration":{"title":"","color":"primary","icon":"mdi-arrow-collapse-left","text":true,"outlined":false}},{"type":"spacer"},{"type":"note","data":{"value":"CMO:"},"decoration":{"classes":"secondary--text caption"}},{"type":"avatar","decoration":{"src":"${user.photo}","icon":"mdi-face","style":"width:24px; padding:0; opacity:0.5;","size":32}},{"type":"note","data":{"value":"${user.name}"},"decoration":{"classes":"secondary--text caption mr-2"}}],"decoration":{"classes":"d-flex align-center justify-start"}}]},"script":""},"id":"yums7zgozwg","activated":false}]},"5df2z0h8flg":{"widgets":[{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_z23prvuk8ne","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"icon","decoration":{"name":"mdi-filter-variant","classes":"display-1  primary--text"}},{"type":"note","data":{"value":"Data Filter  (6547 from 32431)"},"decoration":{"classes":"display-1  primary--text ml-1"}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-arrow-down-circle-outline","text":true,"color":"primary lighten-1","classes":"mx-1 body-1"}}]}]},"script":""},"id":"z23prvuk8ne","activated":false}]},"9113igdmxrg":{"widgets":[{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 60px 10px 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"icon","decoration":{"name":"mdi-chart-box-outline","classes":"display-1  primary--text"}},{"type":"note","data":{"value":"Sampling Statistics"},"decoration":{"classes":"display-1  primary--text ml-1 mr-3"}},{"type":"select","data":{"label":"Fields","items":["a","b","c"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs8","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-play-outline","text":true,"dense":true,"outlined":true,"title":"Apply","color":"primary lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"2yxuw6eu6fi","activated":false},{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_9howouewmht","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"note","data":{"value":"Body Side"},"decoration":{"classes":"title xs3 flex"}},{"type":"chart","decoration":{"classes":"xs4 flex","style":""},"chart":{"series":[{"type":"pie","radius":["30%","45%"],"itemStyle":{"borderRadius":5,"borderColor":"#fff","borderWidth":2},"label":{"show":true,"position":"outer","alignTo":"edge","margin":5,"fontSize":12,"fontWeight":"bold","formatter":"{b}: {c}"},"labelLine":{"show":true},"data":[{"name":"supine","value":1624},{"name":"sitting","value":1622},{"name":"leftDecubitus","value":324},{"name":"N/A","value":0}]}]}},{"type":"html","data":{"value":"<div class=\"title font-weight-light ml-2\" style=\"width:10em;\">\n    One of:\n    <ul class=\"caption font-weight-light \">\n        <li>top</li>\n        <li>front</li>\n        <li>back</li>\n    </ul>\n</div>\n"}}]}]},"script":""},"id":"9howouewmht","activated":false},{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_wb5fnx1ae9","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"note","data":{"value":"Type of artifacts , Artifact"},"decoration":{"classes":"title  xs2 flex"}},{"type":"chart","decoration":{"classes":"xs5 flex","style":""},"chart":{"grid":{"left":200},"xAxis":{"type":"category","data":["No Artifacts","Low-volume recording","External noise","Unknown artifact","Movement","Electrical interference","Bad contact","Clipping","Contact with hair","Muscle rumble","Low-cut filtering","Talking"],"axisLabel":{"fontSize":10,"fontWeight":"bold","interval":0,"rotate":30},"splitLine":{"show":false},"offset":0},"yAxis":{"type":"value","axisLabel":{"fontSize":10,"fontWeight":null}},"series":[{"data":[3392,63,46,30,20,18,14,13,5,4,2,1],"type":"bar","showBackground":true,"label":{"show":true,"position":"top","fontWeight":"bold"},"backgroundStyle":{"color":"rgba(180, 180, 180, 0.2)"}}]}},{"type":"html","data":{"value":"<div class=\"title font-weight-light ml-3\" style=\"width:10em;\">\n\n    Many of:\n    </li><ul class=\"caption font-weight-light \">\n        <li>External noise</li>\n        <li>Talking</li>\n        <li>Electrical interference</li>\n        <li>Muscle rumble</li>\n        <li>Contact with hair</li>\n        <li>Bad contact</li>\n        <li>Clipping</li>\n        <li>Movement</li>\n        <li>Low-cut filtering</li>\n        <li>Vibration Ringing</li>\n        <li>Corrupted file</li>\n        <li>Unclassified artifact</li>\n    </ul>\n</div>\n"}}]}]},"script":""},"id":"wb5fnx1ae9","activated":false},{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_wb5fnx1ae9_clone_93zdr48vn1r","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"note","data":{"value":"Age (Years)"},"decoration":{"classes":"title  xs2 flex"}},{"type":"chart","decoration":{"classes":"xs5 flex","style":""},"chart":{"grid":{"left":200},"xAxis":{"type":"category","data":["18+","25+","45+","60+","N/A"],"axisLabel":{"fontSize":10,"fontWeight":"bold"},"splitLine":{"show":false},"offset":0},"yAxis":{"type":"value","axisLabel":{"fontSize":10}},"series":[{"data":[749,1057,1058,619,88],"type":"bar","showBackground":true,"label":{"show":true,"position":"top","fontWeight":"bold"},"backgroundStyle":{"color":"rgba(180, 180, 180, 0.2)"}}]}},{"type":"html","data":{"value":"<div class=\"title font-weight-light ml-3\" style=\"width:10em;\">\n\n    Number\n</div>\n"}}]}]},"script":""},"id":"93zdr48vn1r","activated":false}]},"nai9md13wb":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ekh2esgnqzo","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"data":{"operation":"NOT IN"},"rows":[{"decoration":{"classes":"d-flex align-center py-2"},"cols":[{"type":"checkbox","data":{"label":"enabled","value":false},"decoration":{"classes":"flex xs1 mr-1","flat":true,"dense":true,"inset":true}},{"type":"select","data":{"label":"Scope","items":["a","b","c"],"multiple":false},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"value":"{{options.data.operation}}","items":["IN","NOT IN"],"multiple":false,"autoSelectFirst":true},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"label":"Values","items":["a","b","c"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs5","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-filter-variant-remove","text":true,"dense":true,"outlined":true,"title":"Remove","color":"error lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"ekh2esgnqzo","activated":false},{"type":"input-group-widget","name":"noname_clone_ekh2esgnqzo_clone_7dzuqfuml8l","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"data":{"operation":"NOT IN"},"rows":[{"decoration":{"classes":"d-flex align-center py-2"},"cols":[{"type":"checkbox","data":{"label":"enabled","value":false},"decoration":{"classes":"flex xs1 mr-1","flat":true,"dense":true,"inset":true}},{"type":"select","data":{"label":"Scope","items":["a","b","c"],"multiple":false},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"value":"{{options.data.operation}}","items":["IN","NOT IN"],"multiple":false,"autoSelectFirst":true},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"label":"Values","items":["a","b","c"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs5","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-filter-variant-remove","text":true,"dense":true,"outlined":true,"title":"Remove","color":"error lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"7dzuqfuml8l","activated":false},{"type":"input-group-widget","name":"noname_clone_ekh2esgnqzo_clone_7dzuqfuml8l_clone_8g2ev3e8mkl","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"data":{"operation":"NOT IN"},"rows":[{"decoration":{"classes":"d-flex align-center py-2"},"cols":[{"type":"checkbox","data":{"label":"enabled","value":false},"decoration":{"classes":"flex xs1 mr-1","flat":true,"dense":true,"inset":true}},{"type":"select","data":{"label":"Scope","items":["a","b","c"],"multiple":false},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"value":"{{options.data.operation}}","items":["IN","NOT IN"],"multiple":false,"autoSelectFirst":true},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"label":"Values","items":["a","b","c"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs5","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-filter-variant-remove","text":true,"dense":true,"outlined":true,"title":"Remove","color":"error lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"8g2ev3e8mkl","activated":false},{"type":"input-group-widget","name":"noname_clone_ekh2esgnqzo_clone_sm8rv5cz8h","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-2"},"cols":[{"type":"note","data":{"value":""},"decoration":{"classes":"flex xs1 mr-1","flat":true,"dense":true,"inset":true}},{"type":"select","data":{"label":"Scope","items":["a","b","c"],"multiple":false},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"value":"{{options.data.operation}}","items":["IN","NOT IN"],"multiple":false,"autoSelectFirst":true},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"label":"Values","items":["a","b","c"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs5","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag","disabled":true},"decoration":{"icon":"mdi-filter-variant-plus","text":true,"dense":true,"outlined":true,"title":"Add   ","color":"primary lighten-1","style":"text-align:right !important; ","classes":"mx-1"}}]}]},"script":""},"id":"sm8rv5cz8h","activated":false},{"type":"input-group-widget","name":"noname_clone_9oczrp5rrxj","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n\n  }\n"},"data":{"source":"embedded","embedded":{"data":{"operation":"IN"},"rows":[{"decoration":{"classes":"d-flex align-center mt-2"},"cols":[{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-play-outline","text":true,"dense":true,"outlined":true,"title":"Apply Filter","color":"primary lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"9oczrp5rrxj","activated":false}]},"i92e8oblwrc":{"widgets":[{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_f9tcv3i2s9k","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 60px 10px 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"icon","decoration":{"name":"mdi-table","classes":"display-1  primary--text"}},{"type":"note","data":{"value":"Sampling Data"},"decoration":{"classes":"display-1  primary--text ml-1 mr-3"}},{"type":"select","data":{"label":"Fields","items":["a","b","c"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs8","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-play-outline","text":true,"dense":true,"outlined":true,"title":"Apply","color":"primary lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"f9tcv3i2s9k","activated":false}]}},"title":"report2","url":"http://localhost:8080/design/Recording%20Data%20Labeling#/clone","id":"clone"},{"layout":"monitor","sections":[{"id":"sein9w9tfe","type":"section","align":"justify-center","holders":[{"name":"5df2z0h8flg","width":11}]},{"id":"fwaw17n8mnw","type":"section","align":"justify-center","holders":[{"name":"nai9md13wb","width":11}]},{"id":"kk82v7jcsp","type":"section","align":"justify-center","holders":[{"name":"9113igdmxrg","width":11}]},{"id":"qewh6bj8bjj","type":"section","align":"justify-center","holders":[{"name":"i92e8oblwrc","width":11}]},{"id":"et21wrb3sln","type":"section","align":"justify-start","holders":[{"name":"9a0wqrlqjkn","width":12}]}],"holders":{"h-bar":{"widgets":[{"type":"tab-bar-widget","name":"noname","icon":"mdi-page-layout-header","options":{"widget":{"visible":true},"style":"\n  widget-style {\n    margin: 0 0 0 12px;  \n    border-top: 1px solid #cfd7e6;\n    border-left: 1px solid #cfd7e6;\n    border-right: 1px solid #cfd7e6;\n    \n    border-radius:4px;\n    /*box-shadow: 0 1px 3px 0 rgba(89,105,129,.05), 0 1px 1px 0 rgba(0,0,0,.025);*/\n  }\n\n"},"data":{"source":"embedded","embedded":{"decoration":{"color":"secondary","bgColor":"#ffffff","sliderColor":"primary lighten-3","sliderSize":"5","activeClass":"active","classes":"title font-weight-light","right":false,"left":false,"vertical":true},"tabs":[{"title":"Statistics","event":"navigate"},{"title":"Data","event":"navigate"}]},"script":""},"id":"exc82c574qg","activated":false}]},"t-bar":{"widgets":[{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"\n// if(!this.app.user.isLoggedIn){\n//     this.$djvue.login()\n// }    \n\nconsole.log(\"REQUEST QUERY\", window[\"Recording Data Labeling_query\"] )\n\nthis.on({\n    event: \"start\",\n    callback: () => {\n        \n        // let instances = selectWidgets([\n        //     \"zb17pkfsfcm\",\n        //     \"ub5oia8iq7b\",\n        //     \"ivmrgnu39fl\",\n        //     \"8rjugxx9ma\",\n        //     \"nqtkk7jlv3o\",\n        //     \"jakdrli4mv\",\n        //     \"oyhzvsijtn\",\n        //     \"vrv8claid18\",\n        //     \"5b1xoz9cjxk\",\n        //     \"ocortdrr2f\",\n        //     \"d30ypt9v8p8\",\n        //     \"044ud0wknm7d\",\n        //     \"clsivx8hqpn\",\n        //     \"dougod2v1s9\",\n        //     \"fayak96njnh\",\n        //     \"16v4e1dplfx\",\n        //     \"hm7iuynb6gq\",\n        //     \"iva3q60c6l\"\n        // ])\n        \n        // let namedInstances = [\n        //     \"Recording\",\n        //     \"Patient\",\n        //     \"Sound Presentation\",\n        //     \"Recording Quality\",\n        //     \"Class of the informativeness\",\n        //     \"Type of Artifacts\",\n        //     \"Loudness\",\n        //     \"Split Type\"\n            \n            \n        // ]\n        \n        // console.log(window.$data)\n        // setTimeout(() => {\n        //     instances.forEach( d => {\n        //         d.update({data: window.$data},{override:\"options.data\"})\n        //     })    \n        // }, 10)\n        \n        \n        // let tabsWidget = selectWidgets(\"exc82c574qg\").getInstance()\n        // let navBarWidget = selectWidgets(\"yums7zgozwg\").getInstance()\n        // let navButtonWidget = selectWidgets(\"9moznwe4427\")\n        \n        // navButtonWidget.hide()\n        \n        let view = {\n            \"Statistics\": [selectSections(\"kk82v7jcsp\")],\n            \"Data\": [selectSections(\"qewh6bj8bjj\")],\n            // \"Heart Sounds\":selectSections([\"a5jbu31x6na\", \"ljw1qw0emh\"]),\n            // \"Heart Murmurs\":selectSections([\"g9j7lva1dqu\", \"y6r04bx68v\"]),\n            // \"Pathological Findings\": [selectSections([\"if5kj47z4o\"])],\n            // \"Lung Sound\": selectSections([\"pgoylkijd7d\",\"5m1j629g1m3\"]),\n            // \"Sound Segmentation\": selectSections([\"w8llxhwud9\",\"e4x199lg0kj\"]),\n            // \"Form Submission\": selectSections([\"334kc8dt4js\", \"ju35u6cditc\"])\n        }\n        \n        // let workflow = [\n        //     \"Recording Info\",\n        //     \"Recording Validation\",\n        //     \"Heart Sounds\",\n        //     \"Heart Murmurs\",\n        //     \"Pathological Findings\",\n        //     \"Lung Sound\",\n        //     \"Sound Segmentation\",\n        //     \"Form Submission\"   \n        // ]\n        \n        // let activeStage = 0\n        \n        \n        const showView = name => {\n            _.keys(view).forEach(key => {\n                view[key].forEach( v => v.hide())    \n            })\n            view[name].forEach( v => v.show())\n            // activeStage = _.findIndex(workflow, d => d == name)\n        }\n        \n        \n        showView(\"Statistics\")\n        \n        this.on({\n            event: \"navigate\",\n            callback: data => {\n                showView(data.title)\n            }\n        })\n        \n        // this.on({\n        //     event: \"next\",\n        //     callback: () => {\n        //         activeStage = (activeStage < workflow.length-1) ? activeStage+1 : activeStage\n        //         tabsWidget.select(activeStage)\n        //         this.emit(\"navigate\", {title: workflow[activeStage]})\n        //     }\n        // })\n        \n        // this.on({\n        //     event: \"prev\",\n        //     callback: () => {\n        //         activeStage = (activeStage > 0) ? activeStage-1 : activeStage\n        //         tabsWidget.select(activeStage)\n        //         this.emit(\"navigate\", {title: workflow[activeStage]})\n        //     }\n        // })\n        \n        this.on({\n            event: \"layout.h-bar\",\n            callback: data => {\n                \n                navBarWidget.options.rows[0].cols[0].decoration.icon = \n                    (navBarWidget.options.rows[0].cols[0].decoration.icon == \"mdi-arrow-collapse-left\")\n                        ? \"mdi-arrow-collapse-right\"\n                        : \"mdi-arrow-collapse-left\"\n                if(navBarWidget.options.rows[0].cols[0].decoration.icon == \"mdi-arrow-collapse-left\"){\n                    navButtonWidget.hide()    \n                } else {\n                    navButtonWidget.show()\n                }\n                        \n            }\n        })\n        \n        this.on({\n            event: \"change-filter-visibility\",\n            callback: () => {\n                console.log(\"change-filter-visibility\")\n                let s = selectSections(\"fwaw17n8mnw\")\n                console.log(s)\n                if(s.showed){\n                    s.hide()\n                } else {\n                    s.show()\n                }\n            }\n        })\n        \n\n    }\n})\n\n"},"id":"7tfxy64bro4","activated":false},{"type":"input-group-widget","name":"noname","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"button","data":{"event":"layout.h-bar"},"decoration":{"title":"","color":"primary","icon":"mdi-arrow-collapse-left","text":true,"outlined":false}},{"type":"spacer"},{"type":"note","data":{"value":"CMO:"},"decoration":{"classes":"secondary--text caption"}},{"type":"avatar","decoration":{"src":"${user.photo}","icon":"mdi-face","style":"width:24px; padding:0; opacity:0.5;","size":32}},{"type":"note","data":{"value":"${user.name}"},"decoration":{"classes":"secondary--text caption mr-2"}}],"decoration":{"classes":"d-flex align-center justify-start"}}]},"script":""},"id":"yums7zgozwg","activated":false}]},"5df2z0h8flg":{"widgets":[{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_z23prvuk8ne","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"icon","decoration":{"name":"mdi-filter-variant","classes":"title  primary--text"}},{"type":"note","data":{"value":"Data Filter"},"decoration":{"classes":"title  primary--text ml-1 mr-2"}},{"type":"text","data":{"label":"Name","value":""},"decoration":{"classes":"flex xs3","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"html","data":{"value":"<div class=\"secondary--text text-right\">\n    Select <b>240 from 64214</b>   \n</div>\n"}},{"type":"menu","data":{"items":[{"title":"Show Details","event":"change-filter-visibility"},{"title":"Hide Details","event":"change-filter-visibility"},{"title":"Open","event":"pull-molfar"},{"title":"Save","event":"merge-branch"}]},"decoration":{"title":"","iconRight":"mdi-dots-vertical","outlined":false,"color":"secondary lighten-2","text":true,"classes":"mx-1"}}]}]},"script":""},"id":"z23prvuk8ne","activated":false}]},"9113igdmxrg":{"widgets":[{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 60px 10px 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"icon","decoration":{"name":"mdi-chart-box-outline","classes":"title  primary--text"}},{"type":"note","data":{"value":"Sampling Statistics"},"decoration":{"classes":"title  primary--text ml-1 mr-3"}},{"type":"select","data":{"label":"Fields","items":["Body Side","Type of artifacts , Artifact","Age (Years)"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs8","outlined":true,"dense":true,"flat":true}},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-play-outline","text":true,"dense":true,"outlined":true,"title":"Apply","color":"primary lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"2yxuw6eu6fi","activated":false},{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_9howouewmht","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"note","data":{"value":"Body Side"},"decoration":{"classes":"title xs3 flex"}},{"type":"chart","decoration":{"classes":"xs4 flex","style":""},"chart":{"series":[{"type":"pie","radius":["30%","45%"],"itemStyle":{"borderRadius":5,"borderColor":"#fff","borderWidth":2},"label":{"show":true,"position":"outer","alignTo":"edge","margin":5,"fontSize":12,"fontWeight":"bold","formatter":"{b}: {c}"},"labelLine":{"show":true},"data":[{"name":"supine","value":1624},{"name":"sitting","value":1622},{"name":"leftDecubitus","value":324},{"name":"N/A","value":0}]}]}},{"type":"html","data":{"value":"<div class=\"title font-weight-light ml-2\" style=\"width:10em;\">\n    One of:\n    <ul class=\"caption font-weight-light \">\n        <li>top</li>\n        <li>front</li>\n        <li>back</li>\n    </ul>\n</div>\n"}}]}]},"script":""},"id":"9howouewmht","activated":false},{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_wb5fnx1ae9","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"note","data":{"value":"Type of artifacts , Artifact"},"decoration":{"classes":"title  xs2 flex"}},{"type":"chart","decoration":{"classes":"xs5 flex","style":""},"chart":{"grid":{"left":200},"xAxis":{"type":"category","data":["No Artifacts","Low-volume recording","External noise","Unknown artifact","Movement","Electrical interference","Bad contact","Clipping","Contact with hair","Muscle rumble","Low-cut filtering","Talking"],"axisLabel":{"fontSize":10,"fontWeight":"bold","interval":0,"rotate":30},"splitLine":{"show":false},"offset":0},"yAxis":{"type":"value","axisLabel":{"fontSize":10,"fontWeight":null}},"series":[{"data":[3392,63,46,30,20,18,14,13,5,4,2,1],"type":"bar","showBackground":true,"label":{"show":true,"position":"top","fontWeight":"bold"},"backgroundStyle":{"color":"rgba(180, 180, 180, 0.2)"}}]}},{"type":"html","data":{"value":"<div class=\"title font-weight-light ml-3\" style=\"width:10em;\">\n\n    Many of:\n    </li><ul class=\"caption font-weight-light \">\n        <li>External noise</li>\n        <li>Talking</li>\n        <li>Electrical interference</li>\n        <li>Muscle rumble</li>\n        <li>Contact with hair</li>\n        <li>Bad contact</li>\n        <li>Clipping</li>\n        <li>Movement</li>\n        <li>Low-cut filtering</li>\n        <li>Vibration Ringing</li>\n        <li>Corrupted file</li>\n        <li>Unclassified artifact</li>\n    </ul>\n</div>\n"}}]}]},"script":""},"id":"wb5fnx1ae9","activated":false},{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_wb5fnx1ae9_clone_93zdr48vn1r","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"note","data":{"value":"Age (Years)"},"decoration":{"classes":"title  xs2 flex"}},{"type":"chart","decoration":{"classes":"xs5 flex","style":""},"chart":{"grid":{"left":200},"xAxis":{"type":"category","data":["18+","25+","45+","60+","N/A"],"axisLabel":{"fontSize":10,"fontWeight":"bold"},"splitLine":{"show":false},"offset":0},"yAxis":{"type":"value","axisLabel":{"fontSize":10}},"series":[{"data":[749,1057,1058,619,88],"type":"bar","showBackground":true,"label":{"show":true,"position":"top","fontWeight":"bold"},"backgroundStyle":{"color":"rgba(180, 180, 180, 0.2)"}}]}},{"type":"html","data":{"value":"<div class=\"title font-weight-light ml-3\" style=\"width:10em;\">\n\n    Number\n</div>\n"}}]}]},"script":""},"id":"93zdr48vn1r","activated":false}]},"nai9md13wb":{"widgets":[{"type":"input-group-widget","name":"noname_clone_ekh2esgnqzo","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"data":{"operation":"IN"},"rows":[{"decoration":{"classes":"d-flex align-center py-2"},"cols":[{"type":"checkbox","data":{"value":false},"decoration":{"classes":"mr-1","flat":true,"inset":true}},{"type":"select","data":{"label":"Scope","items":["Body Side","b","c"],"multiple":false},"decoration":{"classes":"flex xs3 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"value":"{{options.data.operation}}","items":["IN","NOT IN"],"multiple":false,"autoSelectFirst":true},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"label":"Values","items":["supine","b","c"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs5","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-filter-variant-remove","text":true,"dense":true,"outlined":true,"title":"Remove","color":"error lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"ekh2esgnqzo","activated":false},{"type":"input-group-widget","name":"noname_clone_ekh2esgnqzo_clone_7dzuqfuml8l","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"data":{"operation":">="},"rows":[{"decoration":{"classes":"d-flex align-center py-2"},"cols":[{"type":"checkbox","data":{"value":false},"decoration":{"classes":"mr-1","flat":true,"inset":true}},{"type":"select","data":{"label":"Scope","items":["Age (Years)","b","c"],"multiple":false},"decoration":{"classes":"flex xs3 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"value":"{{options.data.operation}}","items":[">=","NOT IN"],"multiple":false,"autoSelectFirst":true},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"text","data":{"label":"Value","value":60},"decoration":{"classes":"flex xs5","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-filter-variant-remove","text":true,"dense":true,"outlined":true,"title":"Remove","color":"error lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"7dzuqfuml8l","activated":false},{"type":"input-group-widget","name":"noname_clone_ekh2esgnqzo_clone_7dzuqfuml8l_clone_8g2ev3e8mkl","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"data":{"operation":"CONTAINS ANY"},"rows":[{"decoration":{"classes":"d-flex align-center py-2"},"cols":[{"type":"checkbox","data":{"value":false},"decoration":{"classes":"mr-1","flat":true,"inset":true}},{"type":"select","data":{"label":"Scope","items":["Type of artifacts , Artifact","b","c"],"multiple":false},"decoration":{"classes":"flex xs3 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"value":"{{options.data.operation}}","items":["CONTAINS ALL","NOT CONTAINS ALL","CONTAINS ANY","NOT CONTAINS ANY"],"multiple":false,"autoSelectFirst":true},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"label":"Values","items":["External noise","Talking","Electrical interference","Muscle rumble","Contact with hair","Bad contact","Clipping","Movement","Low-cut filtering","Vibration Ringing","Corrupted file","Unclassified artifact"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs5","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-filter-variant-remove","text":true,"dense":true,"outlined":true,"title":"Remove","color":"error lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"8g2ev3e8mkl","activated":false},{"type":"input-group-widget","name":"noname_clone_ekh2esgnqzo_clone_7dzuqfuml8l_clone_8g2ev3e8mkl_clone_i193n5ln19p","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"data":{"operation":"NOT CONTAINS ALL"},"rows":[{"decoration":{"classes":"d-flex align-center py-2"},"cols":[{"type":"checkbox","data":{"value":false},"decoration":{"classes":"mr-1","flat":true,"inset":true}},{"type":"select","data":{"label":"Scope","items":["Type of artifacts , Artifact","b","c"],"multiple":false},"decoration":{"classes":"flex xs3 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"value":"{{options.data.operation}}","items":["CONTAINS ALL","NOT CONTAINS ALL","CONTAINS ANY","NOT CONTAINS ANY"],"multiple":false,"autoSelectFirst":true},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"label":"Values","items":["External noise","Talking","Electrical interference","Muscle rumble","Contact with hair","Bad contact","Clipping","Movement","Low-cut filtering","Vibration Ringing","Corrupted file","Unclassified artifact"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs5","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-filter-variant-remove","text":true,"dense":true,"outlined":true,"title":"Remove","color":"error lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"i193n5ln19p","activated":false},{"type":"input-group-widget","name":"noname_clone_ekh2esgnqzo_clone_sm8rv5cz8h","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-2"},"cols":[{"type":"select","data":{"label":"Scope","items":["a","b","c"],"multiple":false},"decoration":{"classes":"flex xs3 mr-1","style":"margin-left:2em","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"value":"{{options.data.operation}}","items":["IN","NOT IN"],"multiple":false,"autoSelectFirst":true},"decoration":{"classes":"flex xs2 mr-1","outlined":true,"dense":true,"flat":true}},{"type":"select","data":{"label":"Values","items":["a","b","c"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs5","outlined":true,"dense":true,"flat":true}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag","disabled":true},"decoration":{"icon":"mdi-filter-variant-plus","text":true,"dense":true,"outlined":true,"title":"Add   ","color":"primary lighten-1","style":"text-align:right !important; ","classes":"mx-1"}}]}]},"script":""},"id":"sm8rv5cz8h","activated":false},{"type":"input-group-widget","name":"noname_clone_9oczrp5rrxj","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n\n  }\n"},"data":{"source":"embedded","embedded":{"data":{"operation":"IN"},"rows":[{"decoration":{"classes":"d-flex align-center mt-2"},"cols":[{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-play-outline","text":true,"dense":true,"outlined":true,"title":"Apply Filter","color":"primary lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"9oczrp5rrxj","activated":false}]},"i92e8oblwrc":{"widgets":[{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_f9tcv3i2s9k","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n      margin: 60px 10px 0 10px;\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center py-1","style":"border-bottom: 1px solid #bdbdbd;"},"cols":[{"type":"icon","decoration":{"name":"mdi-table","classes":"title  primary--text"}},{"type":"note","data":{"value":"Sampling Data"},"decoration":{"classes":"title  primary--text ml-1 mr-3"}},{"type":"select","data":{"label":"Fields","items":["a","b","c"],"multiple":true,"clearable":true},"decoration":{"classes":"flex xs8","outlined":true,"dense":true,"flat":true}},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-play-outline","text":true,"dense":true,"outlined":true,"title":"Apply","color":"primary lighten-1","style":"text-align:right !important;","classes":"mx-1"}},{"type":"spacer"},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-download","text":true,"dense":true,"outlined":true,"title":"Download CSV","color":"primary lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"f9tcv3i2s9k","activated":false},{"type":"data-table-widget","name":"noname","icon":"mdi-grid","options":{"widget":{"visible":true},"style":"\n  widget-style {\n    margin: 10px;\n    border: 1px solid #dedede;\n\n  }\n"},"data":{"source":"embedded","embedded":{"decoration":{"dense":true},"header":{"decoration":{"class":"body-1 primary lighten-3 white--text"},"items":"{{options.data.header}}"},"rows":"{{options.data.collection}}"},"script":""},"id":"7rj7b0wv6kj","activated":false},{"type":"input-group-widget","name":"noname_clone_2yxuw6eu6fi_clone_f9tcv3i2s9k_clone_d0bdrhchz96","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n   }\n"},"data":{"source":"embedded","embedded":{"rows":[{"decoration":{"classes":"d-flex align-center justify-end py-1 mt-1"},"cols":[{"type":"select","data":{"value":5,"label":"Rows per page","items":[5,10,20],"multiple":false,"clearable":false},"decoration":{"classes":"flex xs1 mr-2","outlined":true,"dense":true,"flat":true}},{"type":"note","data":{"value":"1-5 of 240"},"decoration":{"classes":"secondary--text ml-4 mr-3"}},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-arrow-left","text":true,"dense":true,"outlined":false,"title":"","color":"primary lighten-1","style":"text-align:right !important;","classes":"mx-1"}},{"type":"button","data":{"event":"remove-tag"},"decoration":{"icon":"mdi-arrow-right","text":true,"dense":true,"outlined":false,"title":"","color":"primary lighten-1","style":"text-align:right !important;","classes":"mx-1"}}]}]},"script":""},"id":"d0bdrhchz96","activated":false}]},"9a0wqrlqjkn":{"widgets":[{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"let t = selectWidgets(\"7rj7b0wv6kj\")\nconst data = {\n  \"name\": \"source\",\n  \"header\": [\n     \"FINALIZED\",\n    \"Type of artifacts , Artifact\",\n    \"Body Position\",\n    \"Age (Years)\",\n    \"Details\"\n\n  ],\n  \"collection\": [\n  {\n  \"FINALIZED\": true,\n  \"Assigned to\": \"Oleh Shpak\",\n  \"Reviewer\": \"\",\n  \"1st level completed\": true,\n  \"2nd level completed\": true,\n  \"Confidence\": \"Confident\",\n  \"Segmented Heart Sound\": true,\n  \"Segmented Lung Sound\": true,\n  \"Segmented Intestinal Sound\": false,\n  \"Final Heart Sound Review Completed\": true,\n  \"Final Lung Sound Review Completed\": false,\n  \"Final Vascular Sound Review Completed\": \"\",\n  \"Intestinal Sounds Review Completed\": false,\n  \"Clinical Metadata Reviewed\": false,\n  \"Lung sound is present\": true,\n  \"Periferal vascular sound is present\": false,\n  \"Bowel sound is present\": false,\n  \"Recording quality\": \"Bad\",\n  \"Class of the informativeness\": \"Decreased informative\",\n  \"Type of artifacts , Artifact\": [\n       \"External noise\",\n       \"Talking\",\n       \"Electrical interference\",\n       \"Muscle rumble\",\n       \"Contact with hair\"\n       ],\n  \"Examination ID\": \"AVT0005\",\n  \"Patient Count\": 1,\n  \"Age (Years)\": 60,\n  \"Gender\": \"Male\",\n  \"Ethnicity\": \"White\",\n  \"Body Position\": \"leftDecubitus\",\n  \"Body Spot\": \"mitral\",\n  \"Stethoscope Model\": \"=HYPERLINK(CONCATENATE(\\\"http://ec2-54-235-192-121.compute-1.amazonaws.com:8002/?record_v2=\\\",AE2,\\\"&patientId=\\\",V2,\\\"&position=\\\",AA2,\\\"&spot=\\\",AB2,\\\"&device=\\\",AD2), AD2)\",\n  \"model\": \"eKuore\",\n  \"path\": \"OfbD7tnVbDg9mMIoxADKPXHbvkX2%2Frecordings%2FeKuore_lty0bGYM6hraz3BYX2qw\",\n  \"Recorded with Fiter\": \"Raw\",\n  \"Healthy\": false,\n  \"S1 Loudness\": \"Loud\",\n  \"S1 Split Type\": \"Normal\",\n  \"S1 Description\": \"Loud Unidentified\",\n  \"S2 Split Type\": \"Unclassifiable\",\n  \"S2 description\": \"Unclassifiable\",\n  \"S3\": false,\n  \"S3 Type\": \"\",\n  \"S4\": false,\n  \"Summation gallop\": false,\n  \"Arrhythmia (extrasystoles and atrial fibrillation)\": false,\n  \"Ejection Sound\": false,\n  \"Systolic Murmur Undetermined\": true,\n  \"Still's Murmur\": false,\n  \"Holosystolic Murmur\": false,\n  \"Ejection Type Murmur\": true,\n  \"Innocent murmur\": false,\n  \"Midsystolic murmur\": false,\n  \"Late Systolic Murmur\": false,\n  \"Diastolic Murmur Other\": false,\n  \"Diastolic High Frequency Murmur\": false,\n  \"Austin Flint murmur\": false,\n  \"Diastolic Low Frequency Murmur\": false,\n  \"Late diastolic murmur\": false,\n  \"Additional Systolic Tones\": false,\n  \"Additional Diastolic Tones\": false,\n  \"Pericardial Friction Rub\": false,\n  \"Pericardial Knock\": false,\n  \"Constant Murmur\": false,\n  \"Arterial murmur\": \"\",\n  \"Respiratory Sound Type\": \"\",\n  \"Stridor\": false,\n  \"Wheeze\": false,\n  \"Rhonchus\": false,\n  \"Fine crackle\": false,\n  \"Coarse crackle\": false,\n  \"Pleural friction rub\": false,\n  \"Squawk\": false\n },\n {\n  \"FINALIZED\": false,\n  \"Assigned to\": \"\",\n  \"Reviewer\": \"\",\n  \"1st level completed\": false,\n  \"2nd level completed\": false,\n  \"Confidence\": \"\",\n  \"Segmented Heart Sound\": true,\n  \"Segmented Lung Sound\": false,\n  \"Segmented Intestinal Sound\": false,\n  \"Final Heart Sound Review Completed\": true,\n  \"Final Lung Sound Review Completed\": false,\n  \"Final Vascular Sound Review Completed\": \"\",\n  \"Intestinal Sounds Review Completed\": false,\n  \"Clinical Metadata Reviewed\": false,\n  \"Heart sound is present\": true,\n  \"Lung sound is present\": false,\n  \"Periferal vascular sound is present\": false,\n  \"Bowel sound is present\": false,\n  \"Recording quality\": \"Good\",\n  \"Class of the informativeness\": \"Informative\",\n  \"Type of artifacts , Artifact\": [\n   \"Movement\"\n  ],\n  \"Examination ID\": \"AVT0005\",\n  \"Patient Count\": 1,\n  \"Age (Years)\": 60,\n  \"Gender\": \"Male\",\n  \"Ethnicity\": \"White\",\n  \"Body Position\": \"leftDecubitus\",\n  \"Body Spot\": \"mitral\",\n  \"Stethoscope Model\": \"=HYPERLINK(CONCATENATE(\\\"http://ec2-54-235-192-121.compute-1.amazonaws.com:8002/?record_v2=\\\",AE3,\\\"&patientId=\\\",V3,\\\"&position=\\\",AA3,\\\"&spot=\\\",AB3,\\\"&device=\\\",AD3), AD3)\",\n  \"model\": \"littmann\",\n  \"path\": \"OfbD7tnVbDg9mMIoxADKPXHbvkX2%2Frecordings%2FLittmann_lty0bGYM6hraz3BYX2qw\",\n  \"Recorded with Fiter\": \"Raw\",\n  \"Healthy\": false,\n  \"S1 Loudness\": \"Loud\",\n  \"S1 Split Type\": \"Normal\",\n  \"S1 Description\": \"Loud Mitral Component\",\n  \"S2 Split Type\": \"Unclassifiable\",\n  \"S2 description\": \"Unclassifiable\",\n  \"S3\": false,\n  \"S3 Type\": \"\",\n  \"S4\": false,\n  \"Summation gallop\": false,\n  \"Arrhythmia (extrasystoles and atrial fibrillation)\": false,\n  \"Ejection Sound\": false,\n  \"Systolic Murmur Undetermined\": true,\n  \"Still's Murmur\": false,\n  \"Holosystolic Murmur\": false,\n  \"Ejection Type Murmur\": true,\n  \"Innocent murmur\": false,\n  \"Midsystolic murmur\": false,\n  \"Late Systolic Murmur\": false,\n  \"Diastolic Murmur Other\": false,\n  \"Diastolic High Frequency Murmur\": false,\n  \"Austin Flint murmur\": false,\n  \"Diastolic Low Frequency Murmur\": false,\n  \"Late diastolic murmur\": false,\n  \"Additional Systolic Tones\": false,\n  \"Additional Diastolic Tones\": false,\n  \"Pericardial Friction Rub\": false,\n  \"Pericardial Knock\": false,\n  \"Constant Murmur\": false,\n  \"Arterial murmur\": \"\",\n  \"Respiratory Sound Type\": \"\",\n  \"Stridor\": false,\n  \"Wheeze\": false,\n  \"Rhonchus\": false,\n  \"Fine crackle\": false,\n  \"Coarse crackle\": false,\n  \"Pleural friction rub\": false,\n  \"Squawk\": false\n },\n {\n  \"FINALIZED\": false,\n  \"Assigned to\": \"\",\n  \"Reviewer\": \"\",\n  \"1st level completed\": false,\n  \"2nd level completed\": false,\n  \"Confidence\": \"\",\n  \"Segmented Heart Sound\": true,\n  \"Segmented Lung Sound\": false,\n  \"Segmented Intestinal Sound\": false,\n  \"Final Heart Sound Review Completed\": true,\n  \"Final Lung Sound Review Completed\": false,\n  \"Final Vascular Sound Review Completed\": \"\",\n  \"Intestinal Sounds Review Completed\": false,\n  \"Clinical Metadata Reviewed\": false,\n  \"Heart sound is present\": true,\n  \"Lung sound is present\": false,\n  \"Periferal vascular sound is present\": false,\n  \"Bowel sound is present\": false,\n  \"Recording quality\": \"Good\",\n  \"Class of the informativeness\": \"Decreased informative\",\n  \"Type of artifacts , Artifact\": [\n   \"Movement\"\n  ],\n  \"Examination ID\": \"AVT0005\",\n  \"Patient Count\": 1,\n  \"Age (Years)\": 60,\n  \"Gender\": \"Male\",\n  \"Ethnicity\": \"White\",\n  \"Body Position\": \"leftDecubitus\",\n  \"Body Spot\": \"mitral\",\n  \"Stethoscope Model\": \"=HYPERLINK(CONCATENATE(\\\"http://ec2-54-235-192-121.compute-1.amazonaws.com:8002/?record_v2=\\\",AE4,\\\"&patientId=\\\",V4,\\\"&position=\\\",AA4,\\\"&spot=\\\",AB4,\\\"&device=\\\",AD4), AD4)\",\n  \"model\": \"android\",\n  \"path\": \"OfbD7tnVbDg9mMIoxADKPXHbvkX2%2Frecordings%2FAndroid_EAphry8sWXF8IPAsMn3v\",\n  \"Recorded with Fiter\": \"Raw\",\n  \"Healthy\": false,\n  \"S1 Loudness\": \"Loud\",\n  \"S1 Split Type\": \"Normal\",\n  \"S1 Description\": \"Loud Mitral Component\",\n  \"S2 Split Type\": \"Unclassifiable\",\n  \"S2 description\": \"Unclassifiable\",\n  \"S3\": false,\n  \"S3 Type\": \"\",\n  \"S4\": false,\n  \"Summation gallop\": false,\n  \"Arrhythmia (extrasystoles and atrial fibrillation)\": false,\n  \"Ejection Sound\": false,\n  \"Systolic Murmur Undetermined\": true,\n  \"Still's Murmur\": false,\n  \"Holosystolic Murmur\": false,\n  \"Ejection Type Murmur\": true,\n  \"Innocent murmur\": false,\n  \"Midsystolic murmur\": false,\n  \"Late Systolic Murmur\": false,\n  \"Diastolic Murmur Other\": false,\n  \"Diastolic High Frequency Murmur\": false,\n  \"Austin Flint murmur\": false,\n  \"Diastolic Low Frequency Murmur\": false,\n  \"Late diastolic murmur\": false,\n  \"Additional Systolic Tones\": false,\n  \"Additional Diastolic Tones\": false,\n  \"Pericardial Friction Rub\": false,\n  \"Pericardial Knock\": false,\n  \"Constant Murmur\": false,\n  \"Arterial murmur\": \"\",\n  \"Respiratory Sound Type\": \"Lung sound\",\n  \"Stridor\": false,\n  \"Wheeze\": false,\n  \"Rhonchus\": false,\n  \"Fine crackle\": false,\n  \"Coarse crackle\": false,\n  \"Pleural friction rub\": false,\n  \"Squawk\": false,\n  \"Clinical Diagnosis\": \"\",\n  \"EKG Diagnosis\": \"\",\n  \"Echo Diagnosis\": \"\",\n  \"1st level comments\": \"\",\n  \"2nd level comments\": \"Присутсвует очень тихий и короткий вдох\"\n },\n {\n  \"FINALIZED\": false,\n  \"Assigned to\": \"\",\n  \"Reviewer\": \"\",\n  \"1st level completed\": false,\n  \"2nd level completed\": false,\n  \"Confidence\": \"\",\n  \"Segmented Heart Sound\": true,\n  \"Segmented Lung Sound\": false,\n  \"Segmented Intestinal Sound\": false,\n  \"Final Heart Sound Review Completed\": true,\n  \"Final Lung Sound Review Completed\": false,\n  \"Final Vascular Sound Review Completed\": \"\",\n  \"Intestinal Sounds Review Completed\": false,\n  \"Clinical Metadata Reviewed\": false,\n  \"Heart sound is present\": true,\n  \"Lung sound is present\": false,\n  \"Periferal vascular sound is present\": false,\n  \"Bowel sound is present\": false,\n  \"Recording quality\": \"Good\",\n  \"Class of the informativeness\": \"Informative\",\n  \"Type of artifacts , Artifact\": [\n   \"Talking\"\n  ],\n  \"Examination ID\": \"AVT0005\",\n  \"Patient Count\": 1,\n  \"Age (Years)\": 60,\n  \"Gender\": \"Male\",\n  \"Ethnicity\": \"White\",\n  \"Body Position\": \"leftDecubitus\",\n  \"Body Spot\": \"mitral\",\n  \"Stethoscope Model\": \"=HYPERLINK(CONCATENATE(\\\"http://ec2-54-235-192-121.compute-1.amazonaws.com:8002/?record_v2=\\\",AE5,\\\"&patientId=\\\",V5,\\\"&position=\\\",AA5,\\\"&spot=\\\",AB5,\\\"&device=\\\",AD5), AD5)\",\n  \"model\": \"iOS\",\n  \"path\": \"OfbD7tnVbDg9mMIoxADKPXHbvkX2%2Frecordings%2FiOS_03njckWnBRpoUTMxk9Xz\",\n  \"Recorded with Fiter\": \"Raw\",\n  \"Healthy\": false,\n  \"S1 Loudness\": \"Loud\",\n  \"S1 Split Type\": \"Normal\",\n  \"S1 Description\": \"Loud Mitral Component\",\n  \"S2 Split Type\": \"Unclassifiable\",\n  \"S2 description\": \"Unclassifiable\",\n  \"S3\": false,\n  \"S3 Type\": \"\",\n  \"S4\": false,\n  \"Summation gallop\": false,\n  \"Arrhythmia (extrasystoles and atrial fibrillation)\": false,\n  \"Ejection Sound\": false,\n  \"Systolic Murmur Undetermined\": true,\n  \"Still's Murmur\": false,\n  \"Holosystolic Murmur\": false,\n  \"Ejection Type Murmur\": true,\n  \"Innocent murmur\": false,\n  \"Midsystolic murmur\": false,\n  \"Late Systolic Murmur\": false,\n  \"Diastolic Murmur Other\": false,\n  \"Diastolic High Frequency Murmur\": false,\n  \"Austin Flint murmur\": false,\n  \"Diastolic Low Frequency Murmur\": false,\n  \"Late diastolic murmur\": false,\n  \"Additional Systolic Tones\": false,\n  \"Additional Diastolic Tones\": false,\n  \"Pericardial Friction Rub\": false,\n  \"Pericardial Knock\": false,\n  \"Constant Murmur\": false,\n  \"Arterial murmur\": \"\",\n  \"Respiratory Sound Type\": \"\",\n  \"Stridor\": false,\n  \"Wheeze\": false,\n  \"Rhonchus\": false,\n  \"Fine crackle\": false,\n  \"Coarse crackle\": false,\n  \"Pleural friction rub\": false,\n  \"Squawk\": false\n }\n  ]\n \n}\n\n\ndata.collection = data.collection.map( d => ({\n    \"FINALIZED\": (d[\"FINALIZED\"]) \n            ? '<span style=\"text-align:center\"><i style=\"text-align:center\" class=\"mdi mdi-checkbox-marked-outline mdi-24px secondary--text text--lighten-3\"></i></span>' \n            : '<span style=\"text-align:center\"><i class=\"mdi mdi-checkbox-blank-outline mdi-24px secondary--text text--lighten-3\"></i></span>',\n    \"Type of artifacts , Artifact\": `<ul class=\"caption\">${d[\"Type of artifacts , Artifact\"].map( d => \"<li>\"+d+\"</li>\").join(\" \")}</ul>`,\n    \"Body Position\": d[\"Body Position\"] || \"N/A\",\n    \"Age (Years)\": d[\"Age (Years)\"] || \"N/A\",\n    \"Details\": `<a>Show details<i class=\"mdi mdi-arrow-left-circle-outline mdi-rotate-135 mdi-18px\"></i></a>`\n}))\n\n\nsetTimeout(() => {\n    t.update({data},{override:\"options.data\"})\n}, 10)\n"},"id":"qh2ckvj8z7","activated":false}]}},"title":"report-view","url":"http://localhost:8080/design/Harvest%201%20Labeling?recordId=h9Aat1TqmmGe6amjkcrt#/report-view","id":"report-view"},{"layout":"monitor","sections":[{"id":"default section","type":"section","align":"justify-start","holders":[{"name":"default","width":12}]}],"holders":{"default":{"widgets":[{"type":"tab-bar-widget","name":"noname","icon":"mdi-page-layout-header","options":{"widget":{"visible":true},"style":"\n  widget-style {\n    margin: 5px 5px 0 5px;\n  }\n"},"data":{"source":"embedded","embedded":{"decoration":{"color":"secondary","bgColor":"#ffffff","sliderColor":"primary lighten-3","sliderSize":"3","activeClass":"active","classes":"subtitle-1","right":false,"left":true,"vertical":false},"tabs":[{"title":"My Tasks","event":"apply-data-filter"},{"title":"All Tasks","event":"apply-data-filter"},{"title":"Data Sync","event":"apply-data-filter","disabled":"${!app.config.availableSync}"}]},"script":""},"id":"h1vmk3hp36","activated":false},{"type":"input-group-widget","name":"noname_clone_pctcmepqi3f_clone_78hd5gtrjo9_clone_0u43kqr1qy1f_clone_bcfhrexo9tb","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n    width: 40em;\n    float: right;\n    margin-top: -2.8em;\n\n  }\n"},"data":{"source":"embedded","embedded":{"data":{"doAssign":{"1st expert":"Ahmad Amro","2nd expert":"Iryna Prodan"}},"rows":[{"cols":[{"type":"select","data":{"value":"{{options.data.doAssign[\"1st expert\"]}}","label":"1st expert","items":"${ ([\"N/A\"]).concat(app.users.filter(u => [\"1st expert\",\"2nd expert\",\"admin\",\"CMO\"].includes(u.role)).map(u => u.namedAs)) }","multiple":false,"clearable":true,"disabled":"${!(['admin','2nd expert', 'CMO', 'dev']).includes(user.role)}"},"decoration":{"outlined":true,"flat":true,"dense":true,"hideDetails":true,"classes":"mx-2","style":"${`display: ${(app.currentView != \"Data Sync\") ? \"inherit\" : \"none\"}`}"}},{"type":"select","data":{"value":"{{options.data.doAssign[\"2nd expert\"]}}","label":"2nd expert","items":"${ ([\"N/A\"]).concat(app.users.filter(u => [\"2nd expert\",\"admin\",\"CMO\"].includes(u.role)).map(u => u.namedAs))}","multiple":false,"clearable":true,"disabled":"${!(['admin','CMO','dev']).includes(user.role)}"},"decoration":{"outlined":true,"flat":true,"dense":true,"hideDetails":true,"style":"${`display: ${(app.currentView != \"Data Sync\") ? \"inherit\" : \"none\"}`}"}},{"type":"button","data":{"event":"do-assign","disabled":"${!(['admin','2nd expert','COM', 'dev']).includes(user.role)}"},"decoration":{"title":"Assign","outlined":true,"text":false,"color":"primary","classes":"mx-2 subtitle-2","style":"${`display: ${(app.currentView != \"Data Sync\") ? \"inherit\" : \"none\"}`}"}},{"type":"button","data":{"event":"accept-state","disabled":"${!(['admin','CMO', 'dev']).includes(user.role)}"},"decoration":{"title":"Accept","outlined":true,"text":false,"color":"success","classes":"subtitle-2","style":"${`display: ${(app.currentView == \"Data Sync\") ? \"inherit\" : \"none\"}`}"}},{"type":"button","data":{"event":"reject-state","disabled":"${!(['admin','CMO', 'dev']).includes(user.role)}"},"decoration":{"title":"Reject","outlined":true,"text":false,"color":"error","classes":"mx-2 subtitle-2","style":"${`display: ${(app.currentView == \"Data Sync\") ? \"inherit\" : \"none\"}`}"}},{"type":"menu","data":{"disabled":"${!(['admin','CMO', 'dev']).includes(user.role)}","items":[{"title":"Sync Data","event":"sync-data"},{"title":"Open Log","event":"open-log"}]},"decoration":{"icon":"mdi-chevron-down","iconOnly":true,"color":"secondary lighten-2","classes":"mr-1","style":"${`display: ${(app.currentView == \"Data Sync\") ? \"inherit\" : \"none\"}`}"}}],"decoration":{"classes":"d-flex align-center justify-end"}}]},"script":""},"id":"bcfhrexo9tb","activated":false},{"type":"data-table-widget","name":"noname","icon":"mdi-grid","options":{"widget":{"visible":true},"style":"\n  widget-style {\n    border: 1px solid #bdbdbd;\n    margin:0 5px;\n  }\n"},"data":{"source":"embedded","embedded":{"decoration":{"dense":false,"loading":false,"selectBy":"Examination ID","selectableKey":"selectable","singleSelect":"${app.currentView == 'Data Sync'}"},"header":{"decoration":{"class":"body-1 primary--text"},"items":"{{options.data.header}}"},"rows":"{{options.data.collection}}"},"script":""},"id":"3qtce5ji2p6","activated":false},{"type":"input-group-widget","name":"noname","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"items":[{"label":"10","value":10},{"label":"20","value":20},{"label":"30","value":30},{"label":"50","value":50},{"label":"70","value":70}],"rows":[{"decoration":{"classes":"d-flex align-center justify-end py-1 mt-1"},"cols":[{"type":"select","data":{"event":"set-limit","value":"{{options.data.limit}}","label":"Rows per page","itemText":"label","itemValue":"value","items":"{{options.items}}","multiple":false,"clearable":false},"decoration":{"classes":"flex xs2 mr-2","outlined":true,"dense":true,"flat":true}},{"type":"iconButton","data":{"event":"first-page"},"decoration":{"icon":"mdi-chevron-double-left","color":"primary lighten-1","classes":"mx-1"}},{"type":"iconButton","data":{"event":"prev-page"},"decoration":{"icon":"mdi-chevron-left","color":"primary lighten-1","classes":"mx-1"}},{"type":"note","data":{"value":"{{options.data.pagePosition}}"},"decoration":{"classes":"secondary--text ml-4 mr-3 body-2"}},{"type":"iconButton","data":{"event":"next-page"},"decoration":{"icon":"mdi-chevron-right","color":"primary lighten-1","classes":"mx-1"}},{"type":"iconButton","data":{"event":"last-page"},"decoration":{"icon":"mdi-chevron-double-right","color":"primary lighten-1","classes":"mx-1"}}]}]},"script":""},"id":"cssold5h515","activated":false},{"type":"dialog-widget","name":"noname","icon":"mdi-form-select","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"dialog":{"title":"Heart Harvest Workflow Warning","icon":"mdi-alert-outline","width":"35%","classes":"warning lighten-1"},"decoration":{"classes":"pa-5"},"rows":[{"cols":[{"type":"note","data":{"value":"{{opts.data.message}}"},"decoration":{"classes":"title error--text py-1 font-weight-light"}}],"decoration":{"classes":"d-flex justify-center my-2"}},{"cols":[{"type":"submit","data":{"action":"resolve"},"decoration":{"title":"Close","outlined":true,"text":true,"color":"primary","classes":"mr-2"}}],"decoration":{"classes":"d-flex justify-center  align-center mt-5","style":""}}],"activated":false,"_dlgId":"c00c74dd-160d-4e9e-a631-622eeebaa1f1"},"script":""},"id":"9cl6ol9jtda","activated":false},{"type":"dialog-widget","name":"noname","icon":"mdi-form-select","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"dialog":{"title":"Reject Examination","width":"45%","classes":"primary darken-1"},"decoration":{"classes":"pa-5"},"rows":[{"cols":[{"type":"note","data":{"value":"{{opts.data.repeatExaminationId}}"}}]},{"cols":[{"type":"text","data":{"value":"{{opts.data[\"Examination ID\"]}}","label":"Examination","readonly":true},"decoration":{"outlined":true,"dense":true,"flat":true,"classes":"flex  my-2 mx-2"}}],"decoration":{"classes":"d-flex my-2"}},{"cols":[{"type":"text","data":{"event":"repeat-examination-id","value":"{{opts.data.repeatExaminationId}}","label":"Enter Examination ID here"},"decoration":{"outlined":true,"dense":true,"flat":true,"classes":"flex  my-2 mx-2"}}],"decoration":{"classes":"d-flex my-2"}},{"cols":[{"type":"textarea","data":{"value":"{{opts.data.validationSummary}}","label":"Validation Summary"},"decoration":{"outlined":true,"dense":true,"flat":true,"classes":"flex my-2"}}],"decoration":{"classes":"d-flex my-2"}},{"cols":[{"type":"submit","data":{"event":"rename-repo","action":"reject"},"decoration":{"title":"Cancel","outlined":true,"text":true,"color":"warning","classes":"mr-2"}},{"type":"submit","data":{"event":"rename-repo","action":"resolve","disabled":"{{opts.data.disableReject}}"},"decoration":{"title":"Reject","outlined":true,"text":true,"color":"primary","classes":"mr-2"}}],"decoration":{"classes":"d-flex justify-center  align-center mt-5","style":""}}],"activated":false,"data":{"disableReject":true}},"script":""},"id":"e2ljza8k0qg","activated":false}]},"h-bar":{"widgets":[{"type":"input-group-widget","name":"noname","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n    margin-bottom:20px;\n  }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Heart Harvest Workflow"}},{"type":"spacer"},{"type":"navbarButton"}],"decoration":{"classes":"d-flex align-center headline px-1 py-1 mb-1 primary--text"}},{"cols":[{"type":"select","data":{"event":"change-dataset","value":"{{options.data.currentDataset}}","label":"Dataset","items":"{{options.data.availableDatasets}}","multiple":false,"clearable":false},"decoration":{"outlined":true,"flat":true,"dense":true,"hideDetails":true,"classes":"ma-2"}}]},{"cols":[{"type":"note","data":{"value":"${user.role}"},"decoration":{"classes":"subtitle-2"}},{"type":"avatar","decoration":{"src":"${user.photo}","icon":"mdi-account-circle-outline","style":"padding:0;","size":32,"title":"${user.altname}","subTitle":"${user.email}"}}],"decoration":{"classes":"subtitle-1 px-2 mb-1"}}]},"script":""},"id":"cp4zeine4kj","activated":false},{"type":"input-group-widget","name":"noname_clone_pctcmepqi3f_clone_78hd5gtrjo9","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n    margin: 10px 0 20px 0;\n  }\n"},"data":{"source":"embedded","embedded":{"data":{"users":[],"updated by":[],"1st expert":[],"2nd expert":[],"Examination ID":"","updated at":""},"rows":[{"cols":[{"type":"note","data":{"value":"Task Filter"}},{"type":"spacer"},{"type":"button","data":{"event":"clear-filter","action":"reject"},"decoration":{"title":"Clear","outlined":true,"text":false,"color":"warning","classes":"mx-1 subtitle-2"}}],"decoration":{"classes":"d-flex align-center title px-1 py-1 mb-1"}},{"cols":[{"type":"text","data":{"value":"{{options.data['Examination ID']}}","label":"Examination ID"},"decoration":{"outlined":true,"dense":true,"flat":true,"classes":"ma-2"}}]},{"cols":[{"type":"select","data":{"value":"{{options.data[\"updated by\"]}}","label":"updated by","items":"${([\"import utils\"]).concat(app.users.map(d => d.namedAs))}","multiple":true,"clearable":true},"decoration":{"outlined":true,"flat":true,"dense":true,"hideDetails":true,"classes":"ma-2"}}]},{"cols":[{"type":"select","data":{"value":"{{options.data[\"1st expert\"]}}","label":"1st expert","items":"${ ([\"N/A\"]).concat( app.users.filter(u => [\"1st expert\",\"2nd expert\",\"admin\"].includes(u.role)).map(u => u.namedAs)) }","multiple":true,"clearable":true},"decoration":{"outlined":true,"flat":true,"dense":true,"hideDetails":true,"classes":"ma-2"}}]},{"cols":[{"type":"select","data":{"value":"{{options.data[\"2nd expert\"]}}","label":"2nd expert","items":"${ ([\"N/A\"]).concat(app.users.filter(u => [\"2nd expert\",\"admin\"].includes(u.role)).map(u => u.namedAs)) }","multiple":true,"clearable":true},"decoration":{"outlined":true,"flat":true,"dense":true,"hideDetails":true,"classes":"ma-2"}}]},{"cols":[{"type":"button","data":{"event":"apply-filter"},"decoration":{"title":"Apply","outlined":true,"text":false,"flat":true,"dense":true,"color":"primary","classes":"mx-2 subtitle-2"}}],"decoration":{"classes":"d-flex align-center justify-end"}}],"decoration":{"style":"${`display: ${(app.currentView == \"Data Sync\") ? \"none\" : \"inherit\"}`}"}},"script":""},"id":"78hd5gtrjo9","activated":false},{"type":"input-group-widget","name":"noname_clone_pctcmepqi3f_clone_78hd5gtrjo9_clone_um8aso2822m","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n    margin: 10px 0 20px 0;\n  }\n"},"data":{"source":"embedded","embedded":{"data":{"users":[],"updated by":[],"1st expert":[],"2nd expert":[],"Examination ID":"","updated at":"","range":["2023-02-01","2023-02-24"]},"rows":[{"cols":[{"type":"note","data":{"value":"Examination Filter"}},{"type":"spacer"},{"type":"button","data":{"event":"clear-sync-filter","action":"reject"},"decoration":{"title":"Clear","outlined":true,"text":false,"color":"warning","classes":"mx-1 subtitle-2"}}],"decoration":{"classes":"d-flex align-center title px-1 py-1 mb-1"}},{"cols":[{"type":"text","data":{"value":"{{options.data.syncFilter[\"Examination ID\"]}}","label":"Examination ID"},"decoration":{"outlined":true,"dense":true,"flat":true,"classes":"ma-2"}}]},{"cols":[{"type":"select","data":{"value":"{{options.data.syncFilter[\"state\"]}}","label":"state","items":["pending","inReview","accepted","rejected"],"multiple":true,"clearable":true},"decoration":{"outlined":true,"flat":true,"dense":true,"hideDetails":true,"classes":"ma-2"}}]},{"cols":[{"type":"select","data":{"value":"{{options.data.syncFilter[\"organization\"]}}","label":"organization","items":"${this.options.data.organizations.map(d => d.name)}","multiple":true,"clearable":true},"decoration":{"outlined":true,"flat":true,"dense":true,"hideDetails":true,"classes":"ma-2"}}]},{"cols":[{"type":"daterange","data":{"value":"{{options.data.syncFilter.dateRange}}","label":"Date Range","clearable":true},"decoration":{"outlined":true,"flat":true,"dense":true,"hideDetails":true,"classes":"ma-2"}}]},{"cols":[{"type":"button","data":{"event":"apply-sync-filter"},"decoration":{"title":"Apply","outlined":true,"text":false,"flat":true,"dense":true,"color":"primary","classes":"mx-2 subtitle-2"}}],"decoration":{"classes":"d-flex align-center justify-end"}}],"decoration":{"style":"${`display: ${(app.currentView != \"Data Sync\") ? \"none\" : \"inherit\"}`}"}},"script":""},"id":"um8aso2822m","activated":false},{"type":"input-group-widget","name":"noname_clone_pctcmepqi3f_clone_5ovawuebe0x","icon":"mdi-card-bulleted-outline","options":{"widget":{"visible":true,"height":300},"style":"\n  widget-style {\n    margin: 10px 0 0 0;\n  }\n"},"data":{"source":"embedded","embedded":{"rows":[{"cols":[{"type":"note","data":{"value":"Tasks"}},{"type":"spacer"},{"type":"button","data":{"event":"open-forms","action":"reject"},"decoration":{"title":"Open","outlined":true,"text":false,"color":"primary","classes":"mx-1 subtitle-2"}}],"decoration":{"classes":"d-flex align-center title px-1 py-1 mb-1"}},{"cols":[{"type":"chart","decoration":{"classes":"flex","style":"height:220px"},"chart":"${app.getStatChart(app.stat)}"}]}],"decoration":{"style":"${`display: ${(app.currentView == \"Data Sync\") ? \"none\" : \"inherit\"}`}"}},"script":""},"id":"5ovawuebe0x","activated":false}]},"t-bar":{"widgets":[{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"this.emit(\"collapse-all\",{ignore:[]})\r\n\r\n\r\nconst activateDialog  = (dialog, d ,m ) => dialog.showAndWait(d || {data:{}}, m || {override:\"opts.data\"})\r\n\r\nconst showWarning = message => {\r\n    let dialog = selectWidgets(\"9cl6ol9jtda\").getInstance()\r\n    activateDialog(dialog, {data: {message}})\r\n}\r\n\r\n\r\nconst getSelection = () => {\r\n    let selected = selectWidgets(\"3qtce5ji2p6\").getInstance().selected\r\n    return selected.filter( s => _.find(window.app.currentData, r => r[\"Examination ID\"] == s[\"Examination ID\"]))\r\n}\r\n\r\nconst removeFromSelection = items => {\r\n    let selected = selectWidgets(\"3qtce5ji2p6\").getInstance().selected\r\n    selected = selected.filter( s => !_.find( items, t => t[\"Examination ID\"] == s[\"Examination ID\"]))\r\n    selectWidgets(\"3qtce5ji2p6\").getInstance().selected = selected\r\n}\r\n\r\n\r\nthis.on({\r\n    event: \"open-forms\",\r\n    callback: async () => {\r\n        let selected = getSelection()\r\n        if(selected.length == 0){\r\n            showWarning(\"No rows selected.\")\r\n        }\r\n        if(selected.length > 5){\r\n            showWarning(\"We open no more than 5 tabs at a time.\")\r\n        }\r\n        let limit = (selected.length > 5) ? 5 : selected.length\r\n        let showed = selected.splice(0,limit)\r\n        \r\n        removeFromSelection(showed)\r\n         \r\n        showed.forEach( f => {\r\n            window.open(\r\n            `${window.app.config.recordsUrl}${f[\"Examination ID\"]}`,\r\n            \"_blank\"\r\n            )\r\n        })\r\n        \r\n    }\r\n})\r\n\r\nthis.on({\r\n    event:\"open-log\",\r\n    callback: () => {\r\n        window.open(\r\n            `./log-listener.html`,\r\n            \"_blank\"\r\n        )\r\n    }\r\n})\r\n\r\nthis.on({\r\n    event:\"sync-data\",\r\n    callback: async () => {\r\n        \r\n        await axios({\r\n            method:\"GET\",\r\n            url: \"./api/data/sync\"\r\n        })\r\n        \r\n        window.open(\r\n            `./log-listener.html`,\r\n            \"_blank\"\r\n        )\r\n    }\r\n})\r\n\r\n\r\n\r\n"},"id":"3z69gkklyqr","activated":false},{"type":"html-widget","name":"STYLES","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<style>\n    .active {\n        /*background:#e5eff5;*/\n    }\n    \n    \n     .note-border {\n        padding: 0 2px;\n        margin: 0 5px;\n        border-bottom: 1px solid #dedede;\n        line-height: 1 !important;\n    }\n    .note-dense{\n        line-height: 1 !important;\n    }\n    .widget-hidden {\n        background: red;\n        display:none;\n    }\n    \n    .topic {\n        border:1px solid #dedede;\n        padding:5px;\n        margin:0 0 5px 5px;\n    }\n</style>","script":""},"id":"ycu230ra8p","activated":false}]}},"title":"table-test","url":"http://localhost:8080/design/HH1E#/"},{"layout":"with-navigation-drawer","sections":[{"id":"default section","type":"section","align":"justify-start","holders":[{"name":"default","width":12}]}],"holders":{"default":{"widgets":[]},"h-bar":{"widgets":[]},"t-bar":{"widgets":[]}},"id":"examrec","title":"exzamrec","url":"http://localhost:8080/design/HH1R#/examrec"}],"keywords":[],"collaborations":[],"_id":"63c5bf07b33d1043d868a21e","title":"Heart Harvest Workflow","description":"Djvue app template. If you is author or collaborator use design tools for modify it","isPublished":true,"name":"HH1E","icon":"./img/djvue.png","skin":{"holders":{"AppHeader":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div></div>","script":""},"id":"d7lapkjp5s9","activated":false},{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"\n\n// const \n\n// const DB_SETTINGS = {\n//      db: {\n//             url: \"mongodb://localhost:27017\",\n//             // url: \"mongodb+srv://jace:jace@jace.llb8spm.mongodb.net?retryWrites=true&w=majority\",\n//             name: \"sparrow\",\n//             labelingCollection: \"harvest1\",\n//             // labelingCollection: \"harvest2\",\n            \n//             metadataCollection: \"harvest1-metadata\",\n//             historyCollection: \"harvest1-history\",\n//             grantCollection: \"app-grant\"\n//         }\n// }\n\n// console.log( window.localStorage.getItem(\"jace__currentDataset\") )\n// window.localStorage.setItem(\"jace__currentDataset\", \"Heart Harvest 1\")\n// console.log(\"!!!!!!!!!!!\", window.localStorage.getItem(\"jace__currentDataset\") )\n\n\nwindow.app = {\n    currentDataset: window.localStorage.getItem(\"jace__currentDataset\") || \"Heart Harvest 1\",\n    users: [],\n    currentData:[],\n    filterView:null,\n    selection:[],\n    activeTab: null,\n    lock: true,\n    doAssign:{}\n}\n\nwindow.localStorage.setItem(\"jace__currentDataset\", window.app.currentDataset)\n\n// console.log(\"LS\", window.localStorage.getItem(\"jace__currentDataset\"))\n\nconst errorWidget = selectWidgets(\"lik2w27zhm\")\nerrorWidget.hide()\n\nconst showError = error => {\n    const data =\n    `\n    <div  class=\"error--text my-5\">\n        <div class=\"display-1 pb-3\">\n            <center>\n                Examination Medical Docs\n            </center>\n        </div>\n        <div class=\"title pb-3\">\n            <center>\n                <i class=\"mdi mdi-alert-outline pr-2\"></i>Incorrect usage\n            </center>\n        </div>\n        <div class=\"subtitle-2 font-weight-light\">\n            <center>\n                ${error}\n            </center>\n        </div>\n    </div>\n    \n    `\n    setTimeout(() => {\n        errorWidget.expand()\n        errorWidget.show()\n        errorWidget.update({data})\n    })\n}\n\nwindow.app.showEndMessage = message => {\n    const data =\n    `\n    <div  class=\"success--text my-5\">\n        <div class=\"display-1 pb-3\">\n            <center>\n                Heart Harvest 1 Labeling Form\n            </center>\n        </div>\n        <div class=\"subtitle-2 font-weight-light\">\n            <center>\n                ${message}\n            </center>\n        </div>\n    </div>\n    \n    `\n    \n    this.emit(\"collapse-all\",{ignore:[\"d7lapkjp5s9\"]})\n    setTimeout(() => {\n        errorWidget.expand()\n        errorWidget.show()\n        errorWidget.update({data})\n    })\n}\n\n\n\nwindow.app.userInfo = d => {\n    if(!d) {\n        return {\n            name: \"N/A\",\n            photo: \"\",\n            email: \"\"\n        }\n    }    \n    \n    let u = _.find(window.app.users, u => [u.name, u.namedAs].includes(d))\n\n    u = (u) \n        ? {\n            name: d,\n            photo: u.photo,\n            email: u.email\n        }    \n        : {\n            name: d,\n            photo:\"\",\n            email:\"\"\n        }\n    return u    \n}\n\nwindow.app.userShortAvatar = (d, multi) => {\n    let u = (multi) ? {name: d} :  window.app.userInfo(d)\n    return {\n        component:   {\n            \"type\": \"avatar\",\n            \"decoration\": {\n              \"src\": u.photo,\n              \"icon\": (multi) ? \"mdi-account-group-outline\" : \"mdi-account-circle-outline\",\n              \"style\": \"padding:0 10px;\",\n              \"classes\": \"flex\",\n              \"size\": 32,\n            //   \"title\":  u.name,\n              \"subTitle\": u.name\n            }\n        }\n    }\n}\n\n\n\nconst colorPalette = [\n\t\t\t\"#1b9e77\",\n\t\t\t\"#d95f02\",\n\t\t\t\"#7570b3\",\n\t\t\t\"#e7298a\",\n\t\t\t\"#66a61e\",\n\t\t\t\"#e6ab02\",\n\t\t\t\"#a6761d\",\n\t\t\t\"#666666\",\n\t\t\t\n\t\t]\n// [\n// \t\t\t\"#e41a1c\",\n// \t\t\t\"#377eb8\",\n// \t\t\t\"#4daf4a\",\n// \t\t\t\"#984ea3\",\n// \t\t\t\"#ff7f00\",\n// \t\t\t\"#ffff33\",\n// \t\t\t\"#a65628\",\n// \t\t\t\"#f781bf\"\n// \t\t]\n\n// [\"#5e2585\", \"#3f88c5\",\"#4fb286\",\"#f4db18\",\"#fc9014\",\"#db0401\"]\n\n// [\"#192e5b\",\"#1d65a6\",\"#72a2c0\",\"#00743f\",\"#f2a104\",\"#f25117\"]\n\n\n\ncolorPalette.reverse()\n\nconst legendData = [\n      {\n        name: \"Assign 2nd expert\",\n        color:\"#c62828\"\n      },\n      {\n        name: \"Assign 1st expert\",\n        color:\"#ff5722\"\n      },\n      {\n        name: \"Continue Labeling\",\n        color:\"#ffa726\"\n      },\n      {\n        name: \"Complete 2nd Stage\",\n        color:\"#ffeb3b\"\n      },\n      {\n        name: \"Complete Labeling\",\n        color:\"#cddc39\"\n      },\n      {\n        name: \"Finalized\",\n        color:\"#388e3c\"\n      }\n    ].map((d, index) => {\n      d.color = colorPalette[index]\n      return d\n    })\n\nwindow.app.getStatChart = data => {\n    \n    if(!data) return {}\n    \n    \n    \n    let visualData = legendData.map( d => {\n        let f = _.find(data.stat, s => s.TODO == d.name)\n        return {\n            name: d.name,\n            value: (f) ? f.count : 0,\n            itemStyle:{\n                color: d.color\n            }    \n        }\n    }).filter( d => d.value > 0)\n    \n    let l = legendData.filter( l => _.find(visualData, v => v.name == l.name))\n    \n    \n    \n    let chart = {\n        title:{\n    text: `${data.total || 0 }`,\n    subtext:`${data.examinations}`,\n    left:\"center\",\n    top:\"55%\",\n    textStyle:{\n      color: \"#7e7e7e\",\n      fontSize:18\n    },\n    subtextStyle: {\n        fontSize: 12,\n        color: \"#7e7e7e\",\n        fontWeight: \"bold\"\n    } \n    \n  },\n   legend: {\n    top: '0%',\n    left: '2%',\n    orient:\"vertical\",\n    itemGap: 2,\n    itemHeight: 10,\n    data: l.map( d => ({name: d.name}))\n  },\n    \"series\": [\n        {\n            \"type\": \"pie\",\n            \"radius\": [\n                \"30%\",\n                \"45%\"\n            ],\n            color:\"data\",\n            center:[\n              \"50%\",\n              \"65%\"\n            ],\n            \"itemStyle\": {\n                \"borderRadius\": 5,\n                \"borderColor\": \"#fff\",\n                \"borderWidth\": 2\n            },\n            \"label\": {\n                \"show\": true,\n                edgeDistance: 5,\n                // \"position\": \"center\",\n                \"formatter\": \"{b|{c}}\",\n                rich:{\n                  a: {\n                    width:20,\n                    fontSize:8,\n                    align: 'center'\n                  },\n                  b:{\n                    fontSize:12,\n                    color: \"#7e7e7e\",\n                    fontWeight:600,\n                    align: 'center'\n                  }\n                }\n            },\n            emphasis: {\n              label: {\n                show: true,\n                fontSize: 64,\n                fontWeight: 'bold',\n                color: \"#757575\"\n              }\n            },\n            labelLine: {\n              show: true\n            },\n           data: visualData\n        }\n    ]\n}\n    return chart\n}\n\n\n\nwindow.app.getStatBar = data => {\n    if(!data) return {}\n    \n    \n    let visualData = legendData.map( d => {\n        let f = _.find(data.stat, s => s.TODO == d.name)\n        return {\n            name: d.name,\n            value: (f) ? f.count : 0,\n            itemStyle:{\n                color: d.color\n            }    \n        }\n    }).filter( d => d.value > 0)\n    let l = legendData.filter( l => _.find(visualData, v => v.name == l.name))\n    \n    \n    \n    let chart = {\n        \n        title:{\n            text: `${data.total || 0 }`,\n            left:\"center\",\n            top:\"55%\",\n            textStyle:{\n              color: \"#8e8e8e\",\n              fontSize:12\n            },\n    // subtextStyle: {\n    //     fontSize: 12,\n    //     color: \"#7e7e7e\",\n    //     fontWeight: \"bold\"\n    // } \n    \n        },\n        grid: {\n            left: 0,\n            right: 0,\n            top:\"auto\",\n            bottom:\"auto\",\n            // height: 24,\n        },\n        // tooltip: {\n        //     trigger: 'axis',\n        //     axisPointer: {\n        //       // Use axis to trigger tooltip\n        //       type: 'shadow' // 'shadow' as default; can also be 'line' or 'shadow'\n        //     }\n        // },\n        xAxis: {\n            type: 'value',\n            show: false\n          },\n        yAxis: {\n            type: 'category',\n            show: false\n        },\n        series: visualData.map( v => {\n            v.type = \"bar\"\n            v.stack = \"total\"\n            \n            v.barWidth = 8\n            v.barCategoryGap = 0\n            v.barGap = 0\n            \n            v.label = {\n                show: true,\n                position:\"top\",\n                formatter: d => (d.data == 0) ? \"\" : d.data,\n                fontSize: 10,\n                fontWeight: \"bold\",\n                color:\"#7d7d7d\",\n                distance: -2\n            }\n            v.itemStyle = _.extend({}, v.itemStyle, {\n                borderWidth:1,\n                borderColor:\"#ffffff\",\n                borderRadius: 15\n            })\n            // v.emphasis= {\n            //     focus: 'series'\n            // } \n            v.data = [v.value]\n            return v   \n        })\n    }    \n    // console.log(chart)\n    return chart\n}\n\nconst statBar = data => ({\n    component:{\n         \"type\": \"chart\",\n         \"decoration\": {\n          \"style\": \"width: 250px; height: 32px;\"\n         },\n         \"chart\": window.app.getStatBar(data)\n    }   \n})\n\n\nconst bootstrap = async () => {\n    \n    const scripts = this.api.selectWidgets(\"gyhlq1nnspo\").config.scripts\n    const getScript = name => _.find(scripts, s => s.name == name).script\n\n    \n    \n    const loadDatasetMetadata = async () => {\n        const options = {\n            db:{\n                url: \"mongodb://localhost:27017\",\n                name: \"sparrow\"\n            }\n        }\n        let response = await this.api.runDps(getScript(\"GET_DATASET_LIST\"),{ options })\n        return response.data\n    }\n    \n    \n    let datasets = await loadDatasetMetadata()\n    // console.log(\"datasets\", datasets)\n    window.app.availableDatasets = datasets.map( d => d.name)\n    \n    const DB_SETTINGS = _.find(datasets, d => d.name == window.app.currentDataset).settings\n    \n    window.app.config = _.extend({}, DB_SETTINGS, {\n        id: window[`${appName}_query`].id,\n        medicalDocUrl: \"./design/HH1PF?id=\",\n        labelingUrl: \"./design/HH1L?recordId=\",\n        recordsUrl: \"./design/HH1R?id=\"\n    })\n    \n    \n    const showTableLoading = () => {\n    setTimeout(() => {\n        selectWidgets(\"3qtce5ji2p6\").getInstance().options.decoration.loading = true\n    }, 10)\n}\n\n    const hideTableLoading = () => {\n        setTimeout(() => {\n            selectWidgets(\"3qtce5ji2p6\").getInstance().options.decoration.loading = false\n        }, 10)\n    }\n    \n    const showInTable = data => {\n        setTimeout(() => {\n            data = _.extend(data, { selection: window.app.dataSelection} )\n            selectWidgets(\"3qtce5ji2p6\").update({ data }, { override: \"options.data\" })\n        }, 10)\n    }\n    \n    const updatePagination = data => {\n        setTimeout(() => {\n            selectWidgets(\"cssold5h515\").update({ data }, { override: \"options.data\" })\n        }, 10)\n    }\n    \n    const updateCollaborators = () => {\n        setTimeout(() => {\n            selectWidgets(\"ihu60jeynt\").update({},{override:\"options.data\"})\n        }, 10)\n    }\n\n    const loadForms = async patientId => {\n        let response = await this.api.runDps(getScript(\"GET_FORMS\"), {options: _.extend(window.app.config, {patientId})})\n        window.app.form = response.data\n    }\n    \n    const loadOrganizations = async () => {\n        let response = await this.api.runDps(getScript(\"GET_ORGANIZATIONS\"), {options: window.app.config})\n        window.app.organizations = response.data\n    }\n\n    const loadData = async () => {\n        showTableLoading()\n        let options = window.app.options \n        \n        window.app.config.customFilter = buildCustomQuery(filterView)\n        options.eventData.filter = window.app.config.customFilter || []\n        \n        let taskResponse = await this.api.runDps(getScript(\"GET_TASKS\"), { options })\n        window.app.options = taskResponse.data.options\n        \n        \n        \n        const todoAssigns = {\n            \"Continue Labeling\": \"1st expert\",\n            \"Complete 2nd Stage\": \"2nd expert\",\n            \"Complete Labeling\": \"CMO\",\n            \"Assign 1st expert\": \"2nd expert\",\n            \"Assign 2nd expert\": \"CMO\",\n            \"Finalized\": \"\"\n        }\n        \n        window.app.currentData = taskResponse.data.collection \n        \n\n        let collection = window.app.currentData.map((d, index) => {\n            \n            _.keys(rowTemplate).forEach(key => {\n                d[key] = rowTemplate[key](d[key], index)\n            })\n            \n            return d\n        })\n        \n    \n        showInTable({\n            header,\n            collection\n        })\n         await loadStat()\n        \n        updatePagination(window.app.options.eventData)\n        // updateView()\n        hideTableLoading()\n    }\n\n  const loadSyncExaminations = async () => {\n        showTableLoading()\n        let options = window.app.options \n        \n        // window.app.config.customFilter = buildSyncQuery(window.app.syncFilter)\n        options.syncFilter = buildSyncQuery(window.app.syncFilter) || []\n        // console.log(\"OPTIONS >>>>\",options)\n        let response = await this.api.runDps(getScript(\"GET_SYNC_EXAMINATIONS\"), { options })\n        // console.log(\"RESPONSE >>>>\",response)\n        window.app.options = response.data.options\n        \n        \n        // // window.app.currentData = taskResponse.data.collection \n        \n        let header = [\n            \"Examination ID\",\n            \"organization\",\n            \"physician\",\n            \"state\",\n            \"updatedAt\",\n            \"validation\"\n           \n        ]\n        \n        const getStateColor = d => {\n            \n            if(d ==\"pending\") return \"#ffa000\"\n            if(d ==\"rejected\") return \"#f44336\"\n            if(d ==\"inReview\") return \"#1e88e5\"\n            if(d ==\"accepted\") return \"#43a047\"\n        }\n        \n        const getValidationColor = d => {\n            if(d !== true) return \"#f44336\"\n            return colorPalette[3]\n        }\n        \n        const htmlState = d => ({\n            html: `<pre class=\"subtitle-2 py-1\" style=\"line-height: 0.9; color:${getStateColor(d)}\">${d}<pre>`\n        })\n        const htmlValidation = d => ({\n            html: `<div class=\"subtitle-2 py-1\" style=\"line-height: 0.9; color:${getValidationColor(d)}\">${(d === true) ? \"passed\" : d.split(\"\\n\").join(\"<br/>\")}<div>`\n        })\n        \n        let rowTemplate = {\n            \"updatedAt\": formatDate,\n            \"state\": htmlState,\n            \"validation\": htmlValidation,\n            \"organization\": d => d.name,\n            \"physician\": d => `${d.firstName} ${d.lastName}`\n        }\n        \n        let collection = response.data.collection\n                .map(d => {\n                    d.selectable = d.state == \"inReview\"\n                    return d\n                })\n                .map((d, index) => {\n                    \n                    _.keys(rowTemplate).forEach(key => {\n                        d[key] = rowTemplate[key](d[key], index)\n                    })\n                    \n                    return d\n                })\n        \n    \n        showInTable({\n            header,\n            collection\n        })\n        // //  await loadStat()\n        \n        updatePagination(window.app.options.eventData)\n        // // updateView()\n        hideTableLoading()\n    }\n\n\n    const loadGrants = async () => {\n        let options = window.app.options \n        let response = await this.api.runDps(getScript(\"GET_GRANTS\"), {options})\n        return response.data \n    }\n        \n    const detectChanges = (a,b) => {\n        if(!a || !b) return false\n        let res = true\n        res &= a.total == b.total\n        a.stat.forEach( d => {\n            let f = _.find(b.stat,  r => d.name == r.name)\n            res &= (f) ? (d.value == f.value) : false\n        })\n        return !res\n    }    \n\n    const loadStat = async () => {\n        let options = window.app.options \n        let response = await this.api.runDps(getScript(\"GET_STAT\"), {options})\n        if( detectChanges(window.app.stat,response.data) ){\n            updateView()\n        }\n        window.app.stat = response.data\n        return response.data \n    }\n\n    const loadCollaborators = async () => {\n        let options = window.app.options \n        let response = await this.api.runDps(getScript(\"GET_TEAM\"), {options})\n        window.app.task = response.data\n        return response.data \n    }\n\n\n    const getUserList = async () => {\n        let grants = await loadGrants()\n        let response = await axios.get(\"./api/users/list\")\n        let users = response.data\n        window.app.users = grants.map( g => _.extend(_.find(users, u => g.email.includes(u.email)), g))\n    }\n\n    const normalizeRole = () => {\n                \n        let worker = _.find( window.app.users, d => d.email.includes(user.email))\n            if( worker ){\n                user.altname = worker.namedAs\n                user.role= worker.role\n                user.namedAs = worker.namedAs\n            } else {\n                user.altname = user.name\n                user.role = \"Reader\"\n            }\n    }\n\n\n    let header = [\n        \"Examination ID\",\n        // \"Recordings\",\n        \"stat\",\n        \"updated by\",\n        \"updated at\",\n        \"1st expert\",\n        \"2nd expert\"\n    ]\n\n    const strong = d => ({\n        html: `<strong>${d}</strong>`\n    })\n    const formatDate = d => moment(new Date(d)).format(\"YY-MM-DD HH:mm:ss\")\n        const formatComment = (d,index) => ({\n        html: `<div class=\"caption\" style=\"line-height:0.9\"> ${(d || \"\").replace(/\\n/gm, \"<br/>\")}</div>`    \n    })    \n    \n    const collaboratorList = d => {\n        d = _.isArray(d) ? d : [d]\n        if(d.length == 1) \n        return window.app.userShortAvatar(d[0],d.length>1)\n        \n        return window.app.userShortAvatar(d.join(\", \"),d.length>1)\n    }\n    \n    const jsObject = d => ({\n        html: `<pre class=\"caption\" style=\"line-height:0.9\">${JSON.stringify(d)}</pre>`\n    })\n    \n    \n    let rowTemplate = {\n        \"stat\": statBar,\n        \"updated by\": collaboratorList,\n        \"updated at\": formatDate,\n        \"1st expert\": collaboratorList,\n        \"2nd expert\": collaboratorList\n    }\n    \n    ///////////////////////////////////////////////////////////////\n    \n    const getSelection = () => {\n    let selected = selectWidgets(\"3qtce5ji2p6\").getInstance().selected\n    return selected.filter( s => _.find(window.app.currentData, r => r[\"Examination ID\"] == s[\"Examination ID\"]))\n}\n\n    const removeFromSelection = items => {\n        let selected = selectWidgets(\"3qtce5ji2p6\").getInstance().selected\n        selected = selected.filter( s => !_.find( items, t => t[\"Examination ID\"] == s[\"Examination ID\"]))\n        selectWidgets(\"3qtce5ji2p6\").getInstance().selected = selected\n    }\n\n    const clearSelection = items => {\n        selectWidgets(\"3qtce5ji2p6\").getInstance().selected = []\n    }\n\n\n    const activateDialog  = (dialog, d ,m ) => dialog.showAndWait(d || {data:{}}, m || {override:\"opts.data\"})\n    \n    \n    const confirmRejectDialog = selectWidgets(\"e2ljza8k0qg\").getInstance() \n    \n    \n    const showWarning = message => {\n        let dialog = selectWidgets(\"9cl6ol9jtda\").getInstance()\n        activateDialog(dialog, {data: {message}})\n    }\n    \n    // const resolveTodo = input => {\n    //     if(!input[\"1st expert\"] && !input[\"2nd expert\"]) return \"Assign 2nd expert\"\n    //     if(!input[\"1st expert\"] && input[\"2nd expert\"]) return \"Assign 1st expert\"\n    //     if( input[\"1st expert\"] ) return \"Continue Labeling\"\n    //   }\n    \n    this.on({\n        event: \"do-assign\",\n        callback: async () => {\n            let assignator = {}\n            \n            let selection = getSelection()\n            if(selection.length == 0){\n                showWarning(\"No rows selected.\")\n                return\n            }\n            if(\n                ( _.isUndefined(window.app.doAssign[\"1st expert\"]) || _.isNull(window.app.doAssign[\"1st expert\"]))\n                &&\n                ( _.isUndefined(window.app.doAssign[\"2nd expert\"]) || _.isNull(window.app.doAssign[\"2nd expert\"]))\n            ){\n                showWarning(\"No expert selected.\")\n                return\n            }\n            \n            if(!( _.isUndefined(window.app.doAssign[\"1st expert\"]) || _.isNull(window.app.doAssign[\"1st expert\"]))){\n                assignator[\"1st expert\"] = (window.app.doAssign[\"1st expert\"] == \"N/A\") ? \"\" : window.app.doAssign[\"1st expert\"]\n            }\n            if(!( _.isUndefined(window.app.doAssign[\"2nd expert\"]) || _.isNull(window.app.doAssign[\"2nd expert\"]))){\n                assignator[\"2nd expert\"] = (window.app.doAssign[\"2nd expert\"] == \"N/A\") ? \"\" : window.app.doAssign[\"2nd expert\"]\n            }\n            \n            assignator[\"updated by\"] = user.namedAs\n            assignator[\"updated at\"] = new Date()\n            \n            \n            \n            \n            \n            removeFromSelection(selection)\n            \n            selection = selection.map( d => d[\"Examination ID\"])\n\n            let options = window.app.options \n            \n            await this.api.runDps(getScript(\"UPDATE_TASKS\"), { options, selection, assignator })\n            \n            await loadData()\n        }\n    })\n    \n    \n    this.on({\n        event: \"repeat-examination-id\",\n        callback: (dialog, sender, data) => {\n            dialog.opts.data.disableReject = dialog.opts.data[\"Examination ID\"] != dialog.opts.data.repeatExaminationId\n        }\n    })\n    \n    \n    \n    \n    this.on({\n        event: \"set-limit\",\n        callback: async (sender, data) => {\n            if (window.app.options.eventData.prevLimit != data) {\n                window.app.options.eventData.prevLimit = data || 10\n                if(!window.app.lock) {\n                    if(window.app.currentView == \"Data Sync\"){\n                        await loadSyncExaminations()                        \n                    } else {\n                        await loadData()\n                    }    \n                }    \n            }\n        }\n    })\n    \n    this.on({\n        event: \"prev-page\",\n        callback: async (sender, data) => {\n            let options = window.app.options\n            let skip = options.eventData.skip - options.eventData.limit\n            skip = (skip < 0) ? 0 : skip\n            if( skip != options.eventData.skip ){\n                options.eventData.skip = skip\n                if(!window.app.lock) {\n                   if(window.app.currentView == \"Data Sync\"){\n                        await loadSyncExaminations()                        \n                    } else {\n                        await loadData()\n                    }\n                }    \n            }\n        }\n    })\n    \n    \n    this.on({\n        event: \"first-page\",\n        callback: async (sender, data) => {\n            window.app.options.eventData.skip = 0\n                if(!window.app.lock) {\n                   if(window.app.currentView == \"Data Sync\"){\n                        await loadSyncExaminations()                        \n                    } else {\n                        await loadData()\n                    }\n                }    \n        }\n    })\n    \n    this.on({\n        event: \"last-page\",\n        callback: async (sender, data) => {\n            window.app.options.eventData.skip = Math.trunc(window.app.options.eventData.total/window.app.options.eventData.limit)*window.app.options.eventData.limit\n                if(!window.app.lock) {\n                    if(window.app.currentView == \"Data Sync\"){\n                        await loadSyncExaminations()                        \n                    } else {\n                        await loadData()\n                    }\n                }    \n        }\n    })\n    \n    this.on({\n        event: \"next-page\",\n        callback: async (sender, data) => {\n            let options = window.app.options\n            if(options.eventData.skip + options.eventData.limit > options.eventData.total) return\n            let skip = options.eventData.skip + options.eventData.limit\n            options.eventData.skip = skip\n            if(!window.app.lock) {\n                if(window.app.currentView == \"Data Sync\"){\n                        await loadSyncExaminations()                        \n                    } else {\n                        await loadData()\n                    }\n            }    \n        }\n    })\n    \n    this.on({\n        event: \"apply-data-filter\",\n        callback: async sender => {\n            // console.log(\"APPLY\", sender.title, window.app.lock)\n            if(!sender.title) return\n            if(window.app.currentView != sender.title){\n                window.app.currentView = sender.title\n               \n                    if(sender.title == \"My Tasks\"){\n                        // console.log(0)\n                        window.app.config.customFilter = []\n                        window.app.options.me = user.namedAs\n                        if(!window.app.lock) {\n                            window.app.options.eventData.skip = 0\n                            await loadData()    \n                            updateView()\n                        }\n                    } else if(sender.title == \"All Tasks\"){\n                        // console.log(1)\n                        window.app.config.customFilter = []\n                        window.app.options.me =\"\"\n                        if(!window.app.lock) {\n                            window.app.options.eventData.skip = 0\n                            await loadData()    \n                            updateView()\n                        }\n                    }\n                    else if(sender.title == \"Data Sync\"){\n                        // console.log(2)\n                        window.app.options.eventData.skip = 0\n                        await loadSyncExaminations()\n                        updateView()\n                    }\n                \n            }\n        }\n    })\n    \n    \n    let initialFilterView = {\n        \"updated by\": [],\n        \"1st expert\": [],\n        \"2nd expert\": [],\n        \"Examination ID\": \"\",\n    }\n    \n    let filterView = _.extend({}, initialFilterView)\n    \n    const clearCustomFilterView = () => {\n        filterView = _.extend({}, initialFilterView)\n        updateCustomFilterView()\n    }\n    \n    const updateCustomFilterView = () => {\n        setTimeout(() => {\n            selectWidgets(\"78hd5gtrjo9\").update({data: filterView},{override:\"options.data\"})\n        }, 10)\n    }\n    \n    const updateSyncFilterView = () => {\n        setTimeout(() => {\n            selectWidgets(\"um8aso2822m\").update({data: window.app},{override:\"options.data\"})\n        }, 10)\n    }\n    \n    \n    const buildCustomQuery = data => {\n        if(!data) return []\n    \n        let res = []\n    \n        if(data[\"Examination ID\"]){\n            res.push({\n                $match:{\n                    \"Examination ID\": {\n                        $regex: data[\"Examination ID\"]\n                    }    \n                }\n            })\n        }\n        \n        if(data[\"updated by\"].length > 0){\n            res.push({\n                $match:{\n                    \"updated by\": {\n                        $in: data[\"updated by\"]\n                    }    \n                }\n            })\n        }\n        \n        if(data[\"1st expert\"].length > 0){\n            res.push({\n                $match:{\n                    \"1st expert\": {\n                        $in: data[\"1st expert\"].map( d => ( d ==\"N/A\" ) ? \"\" : d)\n                    }    \n                }\n            })\n        }\n        if(data[\"2nd expert\"].length > 0){\n            res.push({\n                $match:{\n                    \"2nd expert\": {\n                        $in: data[\"2nd expert\"].map( d => ( d ==\"N/A\" ) ? \"\" : d)\n                    }    \n                }\n            })\n        }\n        return res\n    }\n    \n    \n    const buildSyncQuery = data => {\n        \n        // console.log(\"buildSyncQuery input\", data)\n        \n        if(!data) return []\n    \n        let res = []\n    \n        if(data[\"Examination ID\"]){\n            res.push({\n                $match:{\n                    \"Examination ID\": {\n                        $regex: data[\"Examination ID\"]\n                    }    \n                }\n            })\n        }\n        \n        if(data[\"state\"] && data[\"state\"].length > 0){\n            res.push({\n                $match:{\n                    \"state\": {\n                        $in: data[\"state\"]\n                    }    \n                }\n            })\n        }\n        \n        if(data[\"organization\"] && data[\"organization\"].length > 0){\n            res.push({\n                $match:{\n                    \"organization.name\": {\n                        $in: data[\"organization\"]\n                    }    \n                }\n            })\n        }\n        \n        if(data[\"dateRange\"] && data[\"dateRange\"].length == 2){\n            \n            res.push({\n                $match:{\n                    $and:[\n                        {$expr: {$gte: [\"$updatedAt\", { $toDate: new Date(data[\"dateRange\"][0]).toISOString() } ] }},\n                        {$expr: {$lte: [\"$updatedAt\", { $toDate: new Date(data[\"dateRange\"][1]).toISOString() } ] }}\n                    ]    \n                }\n            })\n        }\n        \n        // console.log(\"buildSyncQuery >>>>\", res)\n        \n        \n        return res\n    }\n    \n    \n    this.on({\n        event: \"accept-state\",\n        callback: async () => {\n            console.log(\"accept-state\", getSelection())\n            let selection = getSelection()[0]\n            if(!selection){\n                showWarning(\"No row selected.\")\n                return\n            }\n            \n            await axios({\n                url:\"./api/data/examination/accept\",\n                method:\"POST\",\n                data: selection\n            })\n            \n            clearSelection()\n            \n            await loadSyncExaminations()\n            \n        }\n    })\n    \n    this.on({\n        event: \"reject-state\",\n        callback: async () => {\n            console.log(\"reject-state\", getSelection())\n            let selection = getSelection()[0]\n            if(!selection){\n                showWarning(\"No row selected.\")\n                return\n            }\n            selection = _.extend({}, selection, {disableReject: true})\n            let res = await activateDialog(confirmRejectDialog, {data: selection} )\n            if(res){\n                console.log(\"RES\", res)\n                await axios({\n                    url:\"./api/data/examination/reject\",\n                    method:\"POST\",\n                    data: res.data\n                })\n                \n                clearSelection()\n                \n                await loadSyncExaminations()\n\n            }\n            \n        }\n    })\n    \n    \n    \n    this.on({\n        event: \"apply-filter\",\n        callback:async () => {\n            window.app.config.customFilter = buildCustomQuery(filterView)\n            window.app.options.eventData.skip = 0\n            await loadData()\n        }\n    })\n    \n    this.on({\n        event: \"apply-sync-filter\",\n        callback:async () => {\n            window.app.config.customSyncFilter = buildSyncQuery(window.app.syncFilter)\n            window.app.options.eventData.skip = 0\n            await loadSyncExaminations()\n        }\n    })\n    \n    this.on({\n        event: \"clear-filter\",\n        callback:async () => {\n            window.app.config.customFilter = []\n            clearCustomFilterView()\n            window.app.options.eventData.skip = 0\n            await loadData()\n        }\n    })\n    \n    this.on({\n        event: \"clear-sync-filter\",\n        callback:async () => {\n            window.app.syncFilter = []\n            updateSyncFilterView()\n            window.app.options.eventData.skip = 0\n            await loadSyncExaminations()\n        }\n    })\n    \n    this.on({\n        event: \"change-dataset\",\n        callback: async (sender, data) => {\n            // console.log(\"!!!!!!!!!!!!\", JSON.stringify(data), window.app.currentDataset, window.localStorage.getItem(\"jace__currentDataset\"))\n            const d = window.localStorage.getItem(\"jace__currentDataset\")\n            if(d) {\n                if(data && data != d){\n                    window.localStorage.setItem(\"jace__currentDataset\", data)\n                    window.app.currentDataset = data\n                    // console.log(\"Change\", window.localStorage.getItem(\"jace__currentDataset\"))\n                \n                    await bootstrap()\n                }\n            } else {\n                if( data ){\n                    window.localStorage.setItem(\"jace__currentDataset\", data)\n                    window.app.currentDataset = data\n                }    \n            }    \n        }\n    })\n    \n    \n    \n    const updateView = () => {\n        // console.log(\"UPDATE VIEW\")\n        let instances = selectWidgets([\n                \"cp4zeine4kj\",\n                \"pctcmepqi3f\",\n                \"5ovawuebe0x\",\n                \"ihu60jeynt\",\n                \"qev2ps1jv6q\",\n                \"0u43kqr1qy1f\",\n                // \"h1vmk3hp36\",\n                \"bcfhrexo9tb\",\n                \"um8aso2822m\"\n                \n                \n            ])\n            \n            setTimeout(() => {\n                instances.forEach( d => {\n                     if(d) d.update({data: window.app}, {override:\"options.data\"})\n                })    \n            }, 10)\n            \n    }\n    \n    \n    //////////////////////////////////////////////////////////////\n    window.app.options = {\n        db: window.app.config.db,\n        id: window.app.config.id,\n        eventData: {\n            total: 0,\n            skip: 0,\n            limit: 10\n        },\n        formUrl: './design/Heart%20Harvest%201%20Labeling%20Form?recordId='\n    }\n    \n    window.app.currentView = \"My Labelings\"\n    \n    console.log(\"START with options\", window.app.options)\n    \n    await getUserList()\n    \n    normalizeRole()\n\t\n\twindow.app.config.customFilter = []\n    \n\tselectWidgets(\"h1vmk3hp36\").getInstance().setTabIndex(0)\n\t\n\twindow.app.options.me = user.namedAs //\"Oleh Shpak\"\n\tawait loadData()\n\n\tawait loadCollaborators()\n\tawait loadOrganizations()\n\t\n\tupdateView()\n\tupdateCustomFilterView()\n\n    this.emit(\"expand-all\",{ignore:[\"25klmtcysbm\"]})\n    this.emit(\"start\")\n    \n    \n    setTimeout(() => {\n        setInterval( async () => {\n            await loadStat(true)\n\n        }, 1000*15)    \n    }, 1000*3)\n    \n    \n    window.app.lock = false    \n    \n    \n}\n\n\n\n// \n// examination Id required\n// \n\n    if(!window[`${appName}_query`]){\n        // \n        // Show application error \n        //\n        \n        showError('Examination ID required. Close this window.')\n\n    } else {\n    \n    \n    // \n    // logged In required\n    // \n    \n        if( !user.isLoggedIn ){\n\n            this.$djvue.login()\n\n        } else {\n    \n            bootstrap()\n            \n        }\n    \n    }    \n\n\n"},"id":"4z7en7r7ym3","activated":false},{"type":"dps-suite-widget","name":"noname","icon":"mdi-card-text-outline","options":{"widget":{"visible":true}},"scripts":[{"name":"GET_RECORD","script":"\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    query: <? \n        [   \n            {\n                $match: { id: $scope.options.recordId }\n            },\n            {\n                $project:{ _id: 0 }\n            }\n                    \n        ] \n    ?> \n)\n\nset(\"res\")\nreturn(\"res[0]\")"},{"name":"GET_METADATA","script":"\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.metadataCollection}` ?>,\n    query: <? \n        [   \n            {\n                $project:{ _id: 0 }\n            }\n                    \n        ] \n    ?> \n)\n\n"},{"name":"GET_EVENTS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_EVENTS\n **     SERVICE: \n **\n **/\n// <?javascript\n//     $scope.options = {\n//         db: {\n//             url: \"mongodb://localhost:27017\",\n//             name: \"sparrow\",\n//             eventCollection: \"harvest1\"\n//         },\n//         eventData:{\n//             total: 0,\n//             pages: 0,\n//             page: 10,\n//             skip: 0,\n//             limit: 10,\n//             filter: [{\n//                 '$match': {\n//                   'Task Completed': false\n//                 }\n//             }]\n//         }\n//     }\n// ?>\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    query: <? $scope.options.eventData.filter.concat([\n        { $count: 'count'},\n        { $project: {_id: 0} }\n    ])?> \n)\n\nset(\"count\")\n\n<?javascript\n    const count = ($scope.count[0]) ? $scope.count[0].count || 0 : 0\n    $scope.options.eventData = _.extend($scope.options.eventData, {\n        total: count,\n        pagePosition: `${$scope.options.eventData.skip+1} - ${Math.min($scope.options.eventData.skip + $scope.options.eventData.limit, count)} from ${count}`\n    })\n?>\n\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    query: <? $scope.options.eventData.filter.concat(\n        [\n          {\n            '$project': {\n              '_id': 0\n            }\n          }, \n          { \n            $sort: {\n                \"updated at\": -1,\n                \"updated by\": 1,\n                \"Examination ID\": 1,\n                \"1st expert\": 1,\n                \"2nd expert\": 1,\n                \"id\":1\n            } \n          },\n          {\n            '$skip': $scope.options.eventData.skip\n          }, \n          {\n            '$limit': $scope.options.eventData.limit\n          }\n        ]\n    )?> \n)\n\nset(\"data\")\n\n<?javascript\n    // let count = $scope.data.length\n    // $scope.options.eventData = _.extend($scope.options.eventData, {\n    //     total: count,\n    //     pagePosition: `${$scope.options.eventData.skip+1} - ${$scope.options.eventData.skip + $scope.options.eventData.limit} from ${count}`\n    // })\n    $scope.res = {\n        options: $scope.options,\n        collection: $scope.data\n    }\n?>    \n\nreturn (\"res\")\n\n// return(\"options\")"},{"name":"GET_TODO_STAT","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_TODO_STAT\n **     SERVICE: \n **\n **/\n\n// <?javascript\n//     $scope.options = {\n//         db: {\n//             url: \"mongodb://localhost:27017\",\n//             name: \"sparrow\",\n//             eventCollection: \"harvest1\"\n//         },\n//         eventData:{\n//             total: 0,\n//             pages: 0,\n//             page: 10,\n//             skip: 0,\n//             limit: 10,\n//             filter: [{\n//                 '$match': {\n//                   'Task Completed': false\n//                 }\n//             }]\n//         }\n//     }\n// ?>\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.eventCollection}` ?>,\n    query: <? \n    \n        [\n          {\n            '$group': {\n              '_id': '$TODO', \n              'count': {\n                '$count': {}\n              }\n            }\n          }, {\n            '$project': {\n              '_id': 0, \n              'count': 1, \n              'TODO': '$_id'\n            }\n          }\n        ]\n    \n    ?> \n)\n\n"},{"name":"TEST_BULK","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: TEST_BULK\n **     SERVICE: \n **\n **/\n\n<?javascript\n    $scope.options = {\n        db: {\n            url: \"mongodb://localhost:27017\",\n            name: \"sparrow\",\n            eventCollection: \"harvest1\"\n        },\n        eventData:{\n            total: 0,\n            pages: 0,\n            page: 10,\n            skip: 0,\n            limit: 10,\n            filter: [{\n                '$match': {\n                  'Task Completed': false\n                }\n            }]\n        }\n    }\n    \n    $scope.commands = [\n        {\n            replaceOne:{\n                filter: { id: 1},\n                replacement: {\n                    id: 1,\n                    context: \" NEW replaced data\"\n                }\n            }\n        },\n        {\n            replaceOne:{\n                filter: { id: 2},\n                replacement: {\n                    id: 1,\n                    context: \"replaced data for 2nd item\"\n                }\n            }\n        }\n    ]\n    \n?>\n\nservice.mongodb.bulk(\n    at: <? $scope.options.db.url ?>,\n    in: \"sparrow.dummy\",\n    commands: <? $scope.commands ?> \n)\n"},{"name":"UPDATE_EVENTS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: UPDATE_EVENTS\n **     SERVICE: \n **\n **/\n\n<?javascript\n\n    $scope.commands = $scope.records.map( r => ({\n        replaceOne:{\n            filter:{\n                id: r.id\n            },\n            replacement: _.extend({},r)\n        }\n    }))\n?>\n\nservice.mongodb.insertMany(\n    at: <? $scope.options.db.url ?>,\n    in: <? `${$scope.options.db.name}.${$scope.options.db.historyCollection}` ?>,\n    docs: <? $scope.records ?>\n)\n\nservice.mongodb.bulk(\n    at: <? $scope.options.db.url ?>,\n    in: <? `${$scope.options.db.name}.${$scope.options.db.eventCollection}` ?>,\n    commands: <? $scope.commands ?> \n)"},{"name":"GET_TODO_CHANGES","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_TODO_CHANGES\n **     SERVICE: \n **\n **/\n// [\n//   {\n//     '$match': {\n//       'updated at': {\n//         '$gt': '2023-01-02T13:08:05.324Z'\n//       }\n//     }\n//   }, {\n//     '$group': {\n//       '_id': '$TODO', \n//       'count': {\n//         '$count': {}\n//       }\n//     }\n//   }\n// ]"},{"name":"GET_GRANTS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_GRANTS\n **     SERVICE: \n **\n **/\n \n// <?javascript\n//     $scope.options = {\n//         db: {\n//             url: \"mongodb://localhost:27017\",\n//             name: \"sparrow\",\n//             eventCollection: \"harvest1\",\n//             grantCollection: \"app-grant\"\n//         },\n//         eventData:{\n//             total: 0,\n//             pages: 0,\n//             page: 10,\n//             skip: 0,\n//             limit: 10,\n//             filter: [{\n//                 '$match': {\n//                   'Task Completed': false\n//                 }\n//             }]\n//         }\n//     }\n// ?> \n \nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.grantCollection}` ?>,\n    query: <? \n        [   \n            {\n                $project:{ _id: 0 }\n            }\n                    \n        ] \n    ?> \n)\n\n// return(\"options\")\n"},{"name":"GET_FORMS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_FORMS\n **     SERVICE: \n **\n **/\n \n// <?javascript\n//     $scope.options = {\n//             db: {\n//                 url: \"mongodb://localhost:27017\",\n//                 name: \"sparrow\",\n//                 labelingCollection: \"harvest1\",\n//                 metadataCollection: \"harvest1-metadata\",\n//                 historyCollection: \"harvest1-history\",\n//                 grantCollection: \"app-grant\"\n//             },\n//             id: \"YVS0033\"\n//         }\n// ?>\n\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.examination` ?>,\n    query: <? \n         [\n          {\n            '$match': {\n              'patientId': $scope.options.id\n            }\n          }, {\n            '$lookup': {\n              'from': 'form', \n              'localField': 'id', \n              'foreignField': 'examinationId', \n              'as': 'forms'\n            }\n          }, {\n            '$lookup': {\n              'from': 'actor', \n              'localField': 'actorId', \n              'foreignField': 'id', \n              'as': 'physician'\n            }\n          }, {\n            '$lookup': {\n              'from': 'record', \n              'localField': 'id', \n              'foreignField': 'examinationId', \n              'as': 'records'\n            }\n          }, {\n            '$project': {\n              '_id': 0, \n              'type': 1, \n              'comment': 1, \n              'state': 1, \n              'dateTime': 1, \n              'patientId': 1, \n              'forms': 1, \n              'physician': 1, \n              'recordCount': {\n                '$size': '$records'\n              }\n            }\n          }, {\n            '$project': {\n              'records': 0\n            }\n          }\n        ]\n     ?> \n)\n\nset(\"data\")\n\n<?javascript\n    let data = $scope.data[0]\n    if(data) {\n        let formType = [\"patient\",\"echo\",\"ekg\"]\n        let forms = formType.map( type => {\n            let f = _.find(data.forms, d => d.type == type)\n            if(f){\n                let form  = f.data.en || f.data.uk\n                if(form) return _.extend(form, { formType: type} )\n            }\n        }).filter( f => f)\n        \n        let physician\n        if( data.physician ){\n            physician = data.physician[0]\n            physician = (physician) \n                ? {\n                    name: `${physician.firstName} ${physician.lastName}`,\n                    email: physician.email\n                }\n                : { name:\"\", email:\"\" }\n        } else {\n            physician = { name:\"\", email:\"\" }\n        }\n        \n            \n        $scope.result = {\n            examination:{\n                patientId: data.patientId,\n                recordCount:data.recordCount,\n                state: data.state,\n                comment: data.comment,\n                date: moment(new Date(data.dateTime)).format(\"YYYY-MM-DD HH:mm:ss\"),\n                physician\n            },\n            patient: _.find(forms, f => f.formType == \"patient\"),\n            ekg: _.find(forms, f => f.formType == \"ekg\"),\n            echo: _.find(forms, f => f.formType == \"echo\"),\n        }\n    } else {\n        $scope.result = {}\n    }    \n\n\n?>\n\nreturn(\"result\")\n\n// return(\"options\")"},{"name":"GET_STAT","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_STAT\n **     SERVICE: \n **\n **/\n\n<?javascript\n    $scope.options.pipeline = [\n          {\n            '$facet': {\n              'total': [\n                {\n                  '$count': 'count'\n                }\n              ], \n              'examinations': [\n                {\n                  '$group': {\n                    '_id': {\n                      'Examination ID': '$Examination ID'\n                    }, \n                    'ids': {\n                      '$addToSet': {}\n                    }\n                  }\n                }, {\n                  '$project': {\n                    'count': {\n                      '$size': '$ids'\n                    }, \n                    '_id': 0\n                  }\n                }\n              ], \n              'stat': [\n                {\n                  '$group': {\n                    '_id': {\n                      'TODO': '$TODO'\n                    }, \n                    'count': {\n                      '$count': {}\n                    }\n                  }\n                }, {\n                  '$project': {\n                    'TODO': '$_id.TODO', \n                    'count': 1, \n                    '_id': 0\n                  }\n                }\n              ]\n            }\n          }, {\n            '$project': {\n              'total': {\n                '$first': '$total'\n              }, \n              'stat': 1, \n              'examinations': {\n                '$size': '$examinations'\n              }\n            }\n          }, {\n            '$project': {\n              'total': '$total.count', \n              'stat': 1, \n              'examinations': 1\n            }\n          }\n        ]\n    \n    $scope.options.userFilter = ($scope.options.me)\n        ? [\n            {\n                '$match': {\n                  '$or': [\n                    {\n                      'updated by': $scope.options.me\n                    }, {\n                      '1st expert': $scope.options.me\n                    }, {\n                      '2nd expert': $scope.options.me\n                    }, {\n                      'CMO': $scope.options.me\n                    }\n                  ]\n                }\n            }    \n        ]\n        : []\n        \n\n?>\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    query: <? $scope.options.eventData.filter\n            .concat($scope.options.userFilter)\n            .concat($scope.options.pipeline)\n    ?> \n)\n\nset(\"res\")\nreturn(\"res[0]\")\n\n\n// service.mongodb.aggregate(\n//     at: <? $scope.options.db.url ?>,\n//     from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n//     query: <? \n//         [\n//           {\n//             '$match': {\n//               'Examination ID': $scope.options.id\n//             }\n//           }, {\n//             '$group': {\n//               '_id': '$TODO', \n//               'value': {\n//                 '$count': {}\n//               }\n//             }\n//           }, {\n//             '$project': {\n//               'name': '$_id', \n//               'value': 1, \n//               '_id': 0\n//             }\n//           }\n//         ]\n    \n//     ?>\n// )    \n// set(\"res.stat\")\n\n// service.mongodb.aggregate(\n//     at: <? $scope.options.db.url ?>,\n//     from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n//     query: <? \n//         [\n//           {\n//             '$match': {\n//               'Examination ID': $scope.options.id\n//             }\n//           }, {\n//             '$count': 'total'\n//           }\n//         ]\n//     ?>\n// )\n\n// set(\"res.total\")\n// <?javascript\n//     $scope.res.total = ($scope.res.total[0]) ? $scope.res.total[0].total : 0 \n// ?>\n// return(\"res\")\n// // return(\"options\")"},{"name":"GET_COLLABORATORS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_COLLABORATORS\n **     SERVICE: \n **\n **/\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    query: <? \n        [\n          {\n            '$match': {\n              'Examination ID': $scope.options.id\n            }\n          }, {\n            '$limit': 1\n          }, {\n            '$project': {\n              '_id': 0, \n              '1st expert': 1, \n              '2nd expert': 1, \n              'CMO': 1\n            }\n          }\n        ]\n    \n    ?>\n)    \nset(\"res\")\n\n<?javascript\n    $scope.res = ( $scope.res[0] ) \n        ? { collaborators: $scope.res[0] } \n        : { collaborators: {\n                \"1st expert\": \"\",\n                \"2nd expert\": \"\",\n                \"CMO\": \"\"\n            }\n        }\n?>\n\nreturn(\"res\")\n\n"},{"name":"GET_TEAM","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_TEAM\n **     SERVICE: \n **\n **/\n\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_COLLABORATORS\n **     SERVICE: \n **\n **/\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    query: <? \n\n        [\n          {\n            '$match': {\n              'Examination ID': $scope.options.id\n            }\n          }, {\n            '$group': {\n              '_id': '$Examination ID', \n              '1st expert': {\n                '$addToSet': '$1st expert'\n              }, \n              '2nd expert': {\n                '$addToSet': '$2nd expert'\n              }, \n              'CMO': {\n                '$addToSet': '$CMO'\n              }\n            }\n          }, {\n            '$project': {\n              '_id': 0\n            }\n          }\n        ]\n\n    ?>\n)    \nset(\"res\")\n\n<?javascript\n    $scope.res = {\n        collaborators: $scope.res[0]\n    }\n    // $scope.res = ( $scope.res[0] ) \n    //     ? { collaborators: $scope.res[0] } \n    //     : { collaborators: {\n    //             \"1st expert\": \"\",\n    //             \"2nd expert\": \"\",\n    //             \"CMO\": \"\"\n    //         }\n    //     }\n?>\n\nreturn(\"res\")\n\n"},{"name":"GET_TASKS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_TASKS\n **     SERVICE: \n **\n **/\n<?javascript\n    $scope.options.pipeline = \n    [\n      {\n        '$group': {\n          '_id': {\n            'Examination ID': '$Examination ID', \n            'TODO': '$TODO'\n          }, \n          'count': {\n            '$count': {}\n          }, \n          '1st expert': {\n            '$addToSet': '$1st expert'\n          }, \n          '2nd expert': {\n            '$addToSet': '$2nd expert'\n          }, \n          'CMO': {\n            '$addToSet': '$CMO'\n          }, \n          'lastUpdate': {\n            '$push': {\n              'updated at': '$updated at', \n              'updated by': '$updated by'\n            }\n          }\n        }\n      }, {\n        '$project': {\n          'Examination ID': '$_id.Examination ID', \n          'TODO': '$_id.TODO', \n          'count': 1, \n          '1st expert': 1, \n          '2nd expert': 1, \n          'CMO': 1, \n          'lastUpdate': 1\n        }\n      }, {\n        '$group': {\n          '_id': {\n            'Examination ID': '$Examination ID'\n          }, \n          'stat': {\n            '$addToSet': {\n              'TODO': '$TODO', \n              'count': '$count'\n            }\n          }, \n          '1st expert': {\n            '$addToSet': '$1st expert'\n          }, \n          '2nd expert': {\n            '$addToSet': '$2nd expert'\n          }, \n          'CMO': {\n            '$addToSet': '$CMO'\n          }, \n          'lastUpdate': {\n            '$addToSet': '$lastUpdate'\n          }\n        }\n      }, {\n        '$project': {\n          'Examination ID': '$_id.Examination ID', \n          'stat': 1, \n          '1st expert': {\n            '$reduce': {\n              'input': '$1st expert', \n              'initialValue': [], \n              'in': {\n                '$setUnion': [\n                  '$$value', '$$this'\n                ]\n              }\n            }\n          }, \n          '2nd expert': {\n            '$reduce': {\n              'input': '$2nd expert', \n              'initialValue': [], \n              'in': {\n                '$setUnion': [\n                  '$$value', '$$this'\n                ]\n              }\n            }\n          }, \n          'CMO': {\n            '$reduce': {\n              'input': '$CMO', \n              'initialValue': [], \n              'in': {\n                '$setUnion': [\n                  '$$value', '$$this'\n                ]\n              }\n            }\n          }, \n          '_id': 0, \n          'lastUpdate': {\n            '$first': {\n              '$sortArray': {\n                'input': {\n                  '$reduce': {\n                    'input': '$lastUpdate', \n                    'initialValue': [], \n                    'in': {\n                      '$setUnion': [\n                        '$$value', '$$this'\n                      ]\n                    }\n                  }\n                }, \n                'sortBy': -1\n              }\n            }\n          }\n        }\n      }, {\n        '$project': {\n          'Examination ID': 1, \n          'stat': 1, \n          '1st expert': 1, \n          '2nd expert': 1, \n          'CMO': 1, \n          '_id': 0, \n          'updated at': '$lastUpdate.updated at', \n          'updated by': '$lastUpdate.updated by'\n        }\n      }, {\n        '$sort': {\n        //   'updated at': -1,    \n          'Examination ID': 1, \n        //   'updated by': 1, \n          \n        }\n      }\n    ] \n    \n    $scope.options.userFilter = ($scope.options.me)\n        ? [\n            {\n                '$match': {\n                  '$or': [\n                    {\n                      'updated by': $scope.options.me\n                    }, {\n                      '1st expert': $scope.options.me\n                    }, {\n                      '2nd expert': $scope.options.me\n                    }, {\n                      'CMO': $scope.options.me\n                    }\n                  ]\n                }\n            }    \n        ]\n        : []\n        \n    $scope.options.pageFilter = [\n        {\n            '$skip': $scope.options.eventData.skip\n        }, {\n            '$limit': $scope.options.eventData.limit\n        }\n    ]    \n    \n    \n    $scope.options.countPipeline = [\n        { $count: 'count'},\n        { $project: {_id: 0} }\n    ]\n\n?>\n\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    query: <? $scope.options.eventData.filter\n                .concat($scope.options.userFilter)\n                .concat($scope.options.pipeline)\n                .concat($scope.options.countPipeline)\n            ?> \n)\n\nset(\"count\")\n\n<?javascript\n    \n    let count = ($scope.count[0]) ? $scope.count[0].count : 0\n    $scope.options.eventData = _.extend($scope.options.eventData, {\n        total: count,\n        pagePosition: `${$scope.options.eventData.skip+1} - ${Math.min($scope.options.eventData.skip + $scope.options.eventData.limit, count)} from ${count}`\n    })\n   \n   \n    \n    \n?>\n\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    query: <? $scope.options.eventData.filter\n                .concat($scope.options.userFilter)\n                .concat($scope.options.pipeline)\n                .concat($scope.options.pageFilter)  \n    ?> \n)\n\nset(\"data\")\n\n<?javascript\n\n    $scope.res = {\n        options: $scope.options,\n        collection: $scope.data.map( d => {\n            d[\"1st expert\"] = _.sortBy(_.uniq(_.flattenDeep(d[\"1st expert\"]))).filter( d => d)\n            d[\"2nd expert\"] = _.sortBy(_.uniq(_.flattenDeep(d[\"2nd expert\"]))).filter( d => d)\n            d[\"CMO\"] = _.sortBy(_.uniq(_.flattenDeep(d[\"CMO\"]))).filter( d => d)\n            d.Recordings = d.stat.map(d => d.count).reduce((a,s) => a+s, 0)\n            d.stat = {\n                stat: d.stat,\n                total: d.Recordings\n            }\n            return d\n        })\n    }\n?>    \n\nreturn (\"res\")\n\n// return(\"options\")"},{"name":"UPDATE_TASKS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: UPDATE_TASKS\n **     SERVICE: \n **\n **/\n\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    query: <? \n        [\n          {\n            '$match': {\n              'Examination ID': {\n                '$in': $scope.selection\n              }\n            }\n          }, {\n            '$project': {\n              '_id': 0\n            }\n          }\n        ]\n    ?> \n)\n\nset(\"records\")\n\n\n<?javascript\n    \n    const resolveTodo = r => {\n        if([\"Assign 2nd expert\", \"Assign 1st expert\"].includes(r.TODO)){\n     \n            if(!r[\"1st expert\"] && !r[\"2nd expert\"]) return \"Assign 2nd expert\"\n            if(!r[\"1st expert\"] && r[\"2nd expert\"]) return \"Assign 1st expert\"\n            if( r[\"1st expert\"] ) return \"Continue Labeling\"\n        \n            \n        } else {\n            \n            return r.TODO\n    \n        }\n    }\n    \n    const resolveAssigment = r => {\n        switch (r.TODO) {\n            case \"Assign 2nd expert\"    : \n                return r[\"CMO\"]\n                break\n            case \"Assign 1st expert\"    : \n                return r[\"2nd expert\"]\n                break\n            case \"Continue Labeling\"    : \n                return r[\"1st expert\"]\n                break\n            case \"Complete 2nd Stage\"   : \n                return r[\"2nd expert\"]\n                break\n            case \"Complete Labeling\"    : \n                return r[\"CMO\"]\n                break\n            case \"Finalized\"            : \n                return \"\"\n                break\n        }\n    }\n    \n    $scope.records = $scope.records.map( r => {\n        \n        if( [\"Assign 2nd expert\", \"Assign 1st expert\"].includes(r.TODO) ){\n            r = _.extend({}, r, $scope.assignator)\n            r.TODO = resolveTodo(r)\n            r[\"assigned to\"] = resolveAssigment(r)\n        } else {\n            r[\"1st expert\"] =  (r[\"1st expert\"]) ? r[\"1st expert\"] : $scope.assignator[\"1st expert\"]\n            r[\"2nd expert\"] =  (r[\"2nd expert\"]) ? r[\"2nd expert\"] : $scope.assignator[\"2nd expert\"]\n            r[\"updated at\"] = $scope.assignator[\"updated at\"]\n            r[\"updated by\"] = $scope.assignator[\"updated by\"]\n            r.TODO = resolveTodo(r)\n            r[\"assigned to\"] = resolveAssigment(r)\n        }   \n        \n        return r    \n    \n        \n    })\n    \n    $scope.commands = $scope.records.map( r => ({\n        replaceOne:{\n            filter:{\n                id: r.id\n            },\n            replacement: _.extend({},r)\n        }\n    }))\n?>\n\n\nservice.mongodb.insertMany(\n    at: <? $scope.options.db.url ?>,\n    in: <? `${$scope.options.db.name}.${$scope.options.db.historyCollection}` ?>,\n    docs: <? $scope.records ?>\n)\n\nservice.mongodb.bulk(\n    at: <? $scope.options.db.url ?>,\n    in: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    commands: <? $scope.commands ?> \n)"},{"name":"GET_DATASET_LIST","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_DATASET_LIST\n **     SERVICE: \n **\n **/\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.dataset` ?>,\n    query: <? \n        [   \n            {\n                $project:{ _id: 0 }\n            }\n                    \n        ] \n    ?> \n)"},{"name":"GET_SYNC_EXAMINATIONS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_SYNC_EXAMINATIONS\n **     SERVICE: \n **\n **/\n\n<?javascript\n    $scope.options.pipeline = \n        [\n  {\n    '$lookup': {\n      'from': $scope.options.db.userCollection, \n      'localField': 'actorId', \n      'foreignField': 'id', \n      'as': 'physician'\n    }\n  }, {\n    '$lookup': {\n      'from': $scope.options.db.organizationCollection, \n      'localField': 'organization', \n      'foreignField': 'id', \n      'as': 'organization'\n    }\n  }, {\n    '$project': {\n      '_id': 0, \n      'Examination ID': '$patientId', \n      'organization': {\n        '$arrayElemAt': [\n          '$organization', 0\n        ]\n      }, \n      'physician': {\n        '$arrayElemAt': [\n          '$physician', 0\n        ]\n      }, \n      \"updatedAt\":\"$updatedAt\",\n      'state': '$state', \n      'validation': '$_validation'\n    }\n  }, {\n      $sort:{\n          updatedAt: -1,\n          organization: 1,\n          state: 1\n      }\n  }\n]\n \n    \n    $scope.options.filter = []\n        \n    $scope.options.pageFilter = [\n        {\n            '$skip': $scope.options.eventData.skip\n        }, {\n            '$limit': $scope.options.eventData.limit\n        }\n    ]    \n    \n    \n    $scope.options.countPipeline = [\n        { $count: 'count'},\n        { $project: {_id: 0} }\n    ]\n\n?>\n\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.examinationCollection}` ?>,\n    query: <? $scope.options.eventData.filter\n                .concat($scope.options.pipeline)\n                .concat($scope.options.syncFilter)\n                .concat($scope.options.countPipeline)\n            ?> \n)\n\nset(\"count\")\n\n<?javascript\n    \n    let count = ($scope.count[0]) ? $scope.count[0].count : 0\n    $scope.options.eventData = _.extend($scope.options.eventData, {\n        total: count,\n        pagePosition: `${$scope.options.eventData.skip+1} - ${Math.min($scope.options.eventData.skip + $scope.options.eventData.limit, count)} from ${count}`\n    })\n?>\n\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.examinationCollection}` ?>,\n    query: <? $scope.options.eventData.filter\n                .concat($scope.options.pipeline)\n                .concat($scope.options.syncFilter)\n                .concat($scope.options.pageFilter)  \n    ?> \n)\n\nset(\"data\")\n\n<?javascript\n\n    $scope.res = {\n        options: $scope.options,\n        collection: $scope.data\n    }\n\n?>    \n\nreturn (\"res\")\n\n// return(\"options\")"},{"name":"GET_ORGANIZATIONS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_ORGANIZATIONS\n **     SERVICE: \n **\n **/\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.organizationCollection}` ?>,\n    query: <? \n        [   \n            {\n                $project:{ _id: 0 }\n            }\n                    \n        ] \n    ?> \n)"}],"data":{"source":"embedded","embedded":"<h2 color=\"#eee\"><center>not configured<center></h2><p>Use options dialog for configure this widget</p>","script":""},"id":"gyhlq1nnspo","activated":false},{"type":"dps-suite-widget","name":"noname_clone_lik2w27zhm","icon":"mdi-card-text-outline","options":{"widget":{"visible":true}},"scripts":[{"name":"GET_RECORD","script":"\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.labelingCollection}` ?>,\n    query: <? \n        [   \n            {\n                $match: { id: $scope.options.recordId }\n            },\n            {\n                $project:{ _id: 0 }\n            }\n                    \n        ] \n    ?> \n)\n\nset(\"res\")\nreturn(\"res[0]\")"},{"name":"GET_METADATA","script":"\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.metadataCollection}` ?>,\n    query: <? \n        [   \n            {\n                $project:{ _id: 0 }\n            }\n                    \n        ] \n    ?> \n)\n\n"},{"name":"GET_EVENTS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_EVENTS\n **     SERVICE: \n **\n **/\n// <?javascript\n//     $scope.options = {\n//         db: {\n//             url: \"mongodb://localhost:27017\",\n//             name: \"sparrow\",\n//             eventCollection: \"harvest1\"\n//         },\n//         eventData:{\n//             total: 0,\n//             pages: 0,\n//             page: 10,\n//             skip: 0,\n//             limit: 10,\n//             filter: [{\n//                 '$match': {\n//                   'Task Completed': false\n//                 }\n//             }]\n//         }\n//     }\n// ?>\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.eventCollection}` ?>,\n    query: <? $scope.options.eventData.filter.concat([\n        { $count: 'count'},\n        { $project: {_id: 0} }\n    ])?> \n)\n\nset(\"count\")\n\n<?javascript\n    const count = ($scope.count[0]) ? $scope.count[0].count || 0 : 0\n    $scope.options.eventData = _.extend($scope.options.eventData, {\n        total: count,\n        pagePosition: `${$scope.options.eventData.skip+1} - ${Math.min($scope.options.eventData.skip + $scope.options.eventData.limit, count)} from ${count}`\n    })\n?>\n\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.eventCollection}` ?>,\n    query: <? $scope.options.eventData.filter.concat(\n        [\n          {\n            '$project': {\n              '_id': 0\n            }\n          }, \n          { \n            $sort: {\n                \"updated at\": -1,\n                \"updated by\": 1,\n                \"Examination ID\": 1,\n                \"1st expert\": 1,\n                \"2nd expert\": 1,\n                \"id\":1\n            } \n          },\n          {\n            '$skip': $scope.options.eventData.skip\n          }, \n          {\n            '$limit': $scope.options.eventData.limit\n          }\n        ]\n    )?> \n)\n\nset(\"data\")\n\n<?javascript\n    // let count = $scope.data.length\n    // $scope.options.eventData = _.extend($scope.options.eventData, {\n    //     total: count,\n    //     pagePosition: `${$scope.options.eventData.skip+1} - ${$scope.options.eventData.skip + $scope.options.eventData.limit} from ${count}`\n    // })\n    $scope.res = {\n        options: $scope.options,\n        collection: $scope.data\n    }\n?>    \n\nreturn (\"res\")\n"},{"name":"GET_TODO_STAT","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_TODO_STAT\n **     SERVICE: \n **\n **/\n\n// <?javascript\n//     $scope.options = {\n//         db: {\n//             url: \"mongodb://localhost:27017\",\n//             name: \"sparrow\",\n//             eventCollection: \"harvest1\"\n//         },\n//         eventData:{\n//             total: 0,\n//             pages: 0,\n//             page: 10,\n//             skip: 0,\n//             limit: 10,\n//             filter: [{\n//                 '$match': {\n//                   'Task Completed': false\n//                 }\n//             }]\n//         }\n//     }\n// ?>\n\nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.eventCollection}` ?>,\n    query: <? \n    \n        [\n          {\n            '$group': {\n              '_id': '$TODO', \n              'count': {\n                '$count': {}\n              }\n            }\n          }, {\n            '$project': {\n              '_id': 0, \n              'count': 1, \n              'TODO': '$_id'\n            }\n          }\n        ]\n    \n    ?> \n)\n\n"},{"name":"TEST_BULK","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: TEST_BULK\n **     SERVICE: \n **\n **/\n\n<?javascript\n    $scope.options = {\n        db: {\n            url: \"mongodb://localhost:27017\",\n            name: \"sparrow\",\n            eventCollection: \"harvest1\"\n        },\n        eventData:{\n            total: 0,\n            pages: 0,\n            page: 10,\n            skip: 0,\n            limit: 10,\n            filter: [{\n                '$match': {\n                  'Task Completed': false\n                }\n            }]\n        }\n    }\n    \n    $scope.commands = [\n        {\n            replaceOne:{\n                filter: { id: 1},\n                replacement: {\n                    id: 1,\n                    context: \" NEW replaced data\"\n                }\n            }\n        },\n        {\n            replaceOne:{\n                filter: { id: 2},\n                replacement: {\n                    id: 1,\n                    context: \"replaced data for 2nd item\"\n                }\n            }\n        }\n    ]\n    \n?>\n\nservice.mongodb.bulk(\n    at: <? $scope.options.db.url ?>,\n    in: \"sparrow.dummy\",\n    commands: <? $scope.commands ?> \n)\n"},{"name":"UPDATE_EVENTS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: UPDATE_EVENTS\n **     SERVICE: \n **\n **/\n\n<?javascript\n\n    $scope.commands = $scope.records.map( r => ({\n        replaceOne:{\n            filter:{\n                id: r.id\n            },\n            replacement: _.extend({},r)\n        }\n    }))\n?>\n\nservice.mongodb.insertMany(\n    at: <? $scope.options.db.url ?>,\n    in: <? `${$scope.options.db.name}.${$scope.options.db.historyCollection}` ?>,\n    docs: <? $scope.records ?>\n)\n\nservice.mongodb.bulk(\n    at: <? $scope.options.db.url ?>,\n    in: <? `${$scope.options.db.name}.${$scope.options.db.eventCollection}` ?>,\n    commands: <? $scope.commands ?> \n)"},{"name":"GET_TODO_CHANGES","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_TODO_CHANGES\n **     SERVICE: \n **\n **/\n// [\n//   {\n//     '$match': {\n//       'updated at': {\n//         '$gt': '2023-01-02T13:08:05.324Z'\n//       }\n//     }\n//   }, {\n//     '$group': {\n//       '_id': '$TODO', \n//       'count': {\n//         '$count': {}\n//       }\n//     }\n//   }\n// ]"},{"name":"GET_GRANTS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_GRANTS\n **     SERVICE: \n **\n **/\n \n// <?javascript\n//     $scope.options = {\n//         db: {\n//             url: \"mongodb://localhost:27017\",\n//             name: \"sparrow\",\n//             eventCollection: \"harvest1\",\n//             grantCollection: \"app-grant\"\n//         },\n//         eventData:{\n//             total: 0,\n//             pages: 0,\n//             page: 10,\n//             skip: 0,\n//             limit: 10,\n//             filter: [{\n//                 '$match': {\n//                   'Task Completed': false\n//                 }\n//             }]\n//         }\n//     }\n// ?> \n \nservice.mongodb.aggregate(\n    at: <? $scope.options.db.url ?>,\n    from: <? `${$scope.options.db.name}.${$scope.options.db.grantCollection}` ?>,\n    query: <? \n        [   \n            {\n                $project:{ _id: 0 }\n            }\n                    \n        ] \n    ?> \n)\n\n// return(\"options\")\n"}],"data":{"source":"embedded","embedded":"<h2 color=\"#eee\"><center>not configured<center></h2><p>Use options dialog for configure this widget</p>","script":""},"id":"lik2w27zhm","activated":false}]},"AppFooter":{"widgets":[]}}},"dpsURL":"","theme":{"primary":"#3C5F70","secondary":"#1B272C","accent":"#615B62","error":"#bc3442","info":"#00D5FF","success":"#008048","warning":"#FB7F00"},"updatedAt":"2023-02-16T14:16:14.780Z","clientOptions":null,"createdAt":"2023-01-13T20:19:35.838Z","owner":"601aab8751c7780004a50099","__v":0}